// middleware/upload.js - FIXED VERSION WITH DEBUG

const multer = require('multer');
const path = require('path');
const fs = require('fs');

// T·∫°o th∆∞ m·ª•c uploads n·∫øu ch∆∞a c√≥
const createUploadDirs = () => {
  const dirs = [
    'data/uploads',
    'data/uploads/products',
    'data/uploads/products/thumbnails'
  ];
  
  dirs.forEach(dir => {
    const fullPath = path.join(__dirname, '..', dir);
    if (!fs.existsSync(fullPath)) {
      fs.mkdirSync(fullPath, { recursive: true });
      console.log(`üìÅ Created directory: ${fullPath}`);
    } else {
      console.log(`‚úÖ Directory exists: ${fullPath}`);
    }
  });
};

createUploadDirs();

// C·∫•u h√¨nh storage cho multer
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadPath = path.join(__dirname, '../data/uploads/products/');
    console.log('üìÅ Upload destination:', uploadPath);
    
    // Ki·ªÉm tra quy·ªÅn ghi
    try {
      fs.accessSync(uploadPath, fs.constants.W_OK);
      console.log('‚úÖ Write permission OK');
    } catch (error) {
      console.error('‚ùå No write permission:', error.message);
    }
    
    cb(null, uploadPath);
  },
  filename: function (req, file, cb) {
    // T·∫°o t√™n file unique: timestamp-originalname
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const fileExtension = path.extname(file.originalname);
    const fileName = `product-${uniqueSuffix}${fileExtension}`;
    console.log('üìù Generated filename:', fileName);
    cb(null, fileName);
  }
});

// File filter - ch·ªâ cho ph√©p ·∫£nh
const fileFilter = (req, file, cb) => {
  console.log('üîç File filter check:', {
    originalname: file.originalname,
    mimetype: file.mimetype,
    fieldname: file.fieldname,
    size: file.size
  });
  
  // Ki·ªÉm tra lo·∫°i file
  if (file.mimetype.startsWith('image/')) {
    console.log('‚úÖ File accepted');
    cb(null, true);
  } else {
    console.log('‚ùå File rejected - not an image');
    cb(new Error('Ch·ªâ cho ph√©p upload file ·∫£nh (JPG, PNG, GIF, WebP)'), false);
  }
};

// C·∫•u h√¨nh multer
const upload = multer({
  storage: storage,
  fileFilter: fileFilter,
  limits: {
    fileSize: 5 * 1024 * 1024, // 5MB
    files: 5 // T·ªëi ƒëa 5 files
  }
});

// ‚úÖ FIXED MIDDLEWARE - MATCH FRONTEND FIELD NAME
const uploadSingle = upload.single('image'); // ‚úÖ CHANGED from 'productImage' to 'image'

// ‚úÖ MIDDLEWARE CHO MULTIPLE FILES
const uploadMultiple = upload.array('images', 5); // ‚úÖ CHANGED from 'productImages' to 'images'

// ‚úÖ ENHANCED ERROR HANDLER MIDDLEWARE
const handleUploadError = (err, req, res, next) => {
  console.log('üö® Upload error occurred:', {
    error: err.message,
    code: err.code,
    field: err.field,
    stack: err.stack
  });

  if (err instanceof multer.MulterError) {
    if (err.code === 'LIMIT_FILE_SIZE') {
      return res.status(400).json({
        success: false,
        message: 'File qu√° l·ªõn! T·ªëi ƒëa 5MB.',
        error: 'FILE_TOO_LARGE'
      });
    }
    if (err.code === 'LIMIT_FILE_COUNT') {
      return res.status(400).json({
        success: false,
        message: 'Qu√° nhi·ªÅu file! T·ªëi ƒëa 5 files.',
        error: 'TOO_MANY_FILES'
      });
    }
    if (err.code === 'LIMIT_UNEXPECTED_FILE') {
      return res.status(400).json({
        success: false,
        message: `T√™n field kh√¥ng ƒë√∫ng. Expected: 'image', received: '${err.field}'`,
        error: 'WRONG_FIELD_NAME'
      });
    }
  }
  
  if (err.message.includes('Ch·ªâ cho ph√©p upload file ·∫£nh')) {
    return res.status(400).json({
      success: false,
      message: err.message,
      error: 'INVALID_FILE_TYPE'
    });
  }
  
  // Other errors
  return res.status(500).json({
    success: false,
    message: 'L·ªói upload: ' + err.message,
    error: 'UPLOAD_ERROR'
  });
};

module.exports = {
  uploadSingle,
  uploadMultiple,
  handleUploadError
};