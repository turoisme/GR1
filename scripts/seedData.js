require('dotenv').config();
const mongoose = require('mongoose');
const Product = require('../models/Product');

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connected to MongoDB');
  } catch (error) {
    console.error('‚ùå MongoDB connection failed:', error);
    process.exit(1);
  }
};

const sampleProducts = [
  {
    name: 'Gi√†y ch·∫°y b·ªô Nike Air',
    price: 2500000,
    image: 'üëü',
    description: 'Gi√†y ch·∫°y b·ªô cao c·∫•p v·ªõi c√¥ng ngh·ªá Air cushioning, thi·∫øt k·∫ø nh·∫π v√† tho√°ng kh√≠.',
    category: 'shoes',
    brand: 'Nike',
    colors: ['ƒêen', 'Tr·∫Øng', 'Xanh d∆∞∆°ng'],
    sizes: ['39', '40', '41', '42', '43'],
    featured: true,
    stockQuantity: 50,
    tags: ['gi√†y', 'ch·∫°y b·ªô', 'th·ªÉ thao', 'nike']
  },
  {
    name: '√Åo th·ªÉ thao Adidas',
    price: 850000,
    image: 'üëï',
    description: '√Åo th·ªÉ thao tho√°ng m√°t v·ªõi c√¥ng ngh·ªá Climalite, ph√π h·ª£p cho m·ªçi ho·∫°t ƒë·ªông th·ªÉ thao.',
    category: 'tops',
    brand: 'Adidas',
    colors: ['ƒê·ªè', 'Xanh l√°', 'Tr·∫Øng', 'ƒêen'],
    sizes: ['S', 'M', 'L', 'XL', 'XXL'],
    featured: true,
    stockQuantity: 75,
    tags: ['√°o', 'th·ªÉ thao', 'adidas', 'tho√°ng m√°t']
  },
  {
    name: 'Qu·∫ßn short th·ªÉ thao',
    price: 650000,
    image: 'ü©≥',
    description: 'Qu·∫ßn short th·ªÉ thao tho·∫£i m√°i, co gi√£n t·ªët, ph√π h·ª£p cho t·∫≠p gym v√† ch·∫°y b·ªô.',
    category: 'bottoms',
    brand: 'Nike',
    colors: ['ƒêen', 'Xanh nh·∫°t', 'V√†ng'],
    sizes: ['S', 'M', 'L', 'XL'],
    featured: true,
    stockQuantity: 60,
    tags: ['qu·∫ßn', 'short', 'th·ªÉ thao', 'gym']
  },
  {
    name: '√Åo kho√°c th·ªÉ thao Nike',
    price: 1250000,
    image: 'üß•',
    description: '√Åo kho√°c ch·ªëng gi√≥, ch·ªëng n∆∞·ªõc nh·∫π, thi·∫øt k·∫ø hi·ªán ƒë·∫°i v√† nƒÉng ƒë·ªông.',
    category: 'tops',
    brand: 'Nike',
    colors: ['ƒêen', 'Tr·∫Øng', 'Xanh d∆∞∆°ng'],
    sizes: ['S', 'M', 'L', 'XL'],
    featured: true,
    stockQuantity: 40,
    tags: ['√°o kho√°c', 'ch·ªëng gi√≥', 'nike', 'outdoor']
  },
  {
    name: 'Qu·∫ßn d√†i th·ªÉ thao Adidas',
    price: 950000,
    image: 'üëñ',
    description: 'Qu·∫ßn d√†i th·ªÉ thao co gi√£n 4 chi·ªÅu, ph√π h·ª£p cho m·ªçi ho·∫°t ƒë·ªông t·ª´ yoga ƒë·∫øn ch·∫°y b·ªô.',
    category: 'bottoms',
    brand: 'Adidas',
    colors: ['ƒêen', 'Xanh l√°', 'H·ªìng'],
    sizes: ['S', 'M', 'L', 'XL'],
    featured: true,
    stockQuantity: 45,
    tags: ['qu·∫ßn d√†i', 'co gi√£n', 'yoga', 'adidas']
  },
  {
    name: 'M≈© th·ªÉ thao Under Armour',
    price: 380000,
    image: 'üß¢',
    description: 'M≈© th·ªÉ thao ch·ªëng n·∫Øng v·ªõi c√¥ng ngh·ªá HeatGear, tho√°ng kh√≠ v√† kh√¥ r√°o.',
    category: 'accessories',
    brand: 'Under Armour',
    colors: ['ƒêen', 'Tr·∫Øng', 'Xanh d∆∞∆°ng', 'ƒê·ªè'],
    sizes: ['S', 'M', 'L'],
    featured: true,
    stockQuantity: 80,
    tags: ['m≈©', 'ch·ªëng n·∫Øng', 'under armour', 'heatgear']
  },
  {
    name: 'Gi√†y Tennis Nike Court',
    price: 2200000,
    image: 'üëü',
    description: 'Gi√†y tennis chuy√™n nghi·ªáp v·ªõi ƒë·∫ø cao su ch·ªëng tr∆∞·ª£t v√† h·ªó tr·ª£ chuy·ªÉn ƒë·ªông linh ho·∫°t.',
    category: 'shoes',
    brand: 'Nike',
    colors: ['Tr·∫Øng', 'ƒêen'],
    sizes: ['39', '40', '41', '42'],
    featured: false,
    stockQuantity: 30,
    tags: ['gi√†y', 'tennis', 'nike', 'chuy√™n nghi·ªáp']
  },
  {
    name: '√Åo tank top Adidas',
    price: 550000,
    image: 'üëï',
    description: '√Åo tank top nƒÉng ƒë·ªông, tho√°ng m√°t, ph√π h·ª£p cho t·∫≠p gym v√† ch·∫°y b·ªô.',
    category: 'tops',
    brand: 'Adidas',
    colors: ['Tr·∫Øng', 'ƒêen', 'H·ªìng', 'Xanh l√°'],
    sizes: ['S', 'M', 'L', 'XL'],
    featured: false,
    stockQuantity: 65,
    tags: ['√°o', 'tank top', 'gym', 'adidas']
  }
];

const seedData = async () => {
  try {
    // Clear existing products
    await Product.deleteMany({});
    console.log('üóëÔ∏è  Cleared existing products');
    
    // Insert sample products
    const products = await Product.insertMany(sampleProducts);
    console.log(`‚úÖ Created ${products.length} products`);
    
    // Display created products
    console.log('\nüì¶ Created Products:');
    products.forEach(product => {
      console.log(`- ${product.name} (${product.getFormattedPrice()})`);
    });
    
    console.log('\nüéâ Database seeded successfully!');
    
  } catch (error) {
    console.error('‚ùå Error seeding database:', error);
  } finally {
    // Close database connection
    await mongoose.connection.close();
    console.log('üîå Database connection closed');
    process.exit(0);
  }
};

const runSeed = async () => {
  console.log('üå± Starting database seeding...');
  console.log('üìç Environment:', process.env.NODE_ENV || 'development');
  console.log('üóÑÔ∏è  MongoDB URI:', process.env.MONGODB_URI ? 'Set ‚úÖ' : 'Not set ‚ùå');
  
  if (!process.env.MONGODB_URI) {
    console.error('‚ùå MONGODB_URI not found in environment variables');
    console.log('üí° Please create .env file with MONGODB_URI');
    process.exit(1);
  }
  
  await connectDB();
  await seedData();
};

// Handle unhandled promise rejections
process.on('unhandledRejection', (err) => {
  console.error('‚ùå Unhandled Promise Rejection:', err.message);
  process.exit(1);
});

// Handle uncaught exceptions
process.on('uncaughtException', (err) => {
  console.error('‚ùå Uncaught Exception:', err.message);
  process.exit(1);
});

// Run the seeding process
runSeed();