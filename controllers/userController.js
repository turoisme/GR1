// controllers/userController.js
const User = require('../models/User');
const Cart = require('../models/Cart');
const Product = require('../models/Product');

class UserController {
  /**
   * Trang t√†i kho·∫£n ch√≠nh - Dashboard
   * GET /user/account
   */
  static async account(req, res) {
    try {
      const userId = req.session.user.id;
      const user = await User.findById(userId);
      
      if (!user) {
        req.flash('error', 'Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n');
        return res.redirect('/auth/login');
      }
      
      console.log('üë§ User account accessed:', {
        userId: user._id,
        email: user.email,
        fullName: user.fullName
      });
      
      // Get user statistics (mock data since Order model not implemented yet)
      const userStats = {
        totalOrders: user.totalOrders || 0,
        totalSpent: user.totalSpent || 0,
        joinedDate: user.createdAt,
        lastLogin: user.lastLogin,
        addressCount: user.addresses.length,
        favoriteCount: user.favoriteProducts.length
      };
      
      // Get recent orders (mock data)
      const recentOrders = [];
      
      // Get current cart
      const cart = await Cart.findBySessionId(req.sessionID, userId);
      
      // Get favorite products
      const favoriteProducts = await Product.find({
        _id: { $in: user.favoriteProducts }
      }).limit(6);
      
      res.render('user/account', {
        title: 'T√†i kho·∫£n c·ªßa t√¥i - SportShop',
        currentPage: 'account',
        user: user,
        userStats: userStats,
        recentOrders: recentOrders,
        cart: cart,
        favoriteProducts: favoriteProducts,
        success: req.flash('success'),
        error: req.flash('error')
      });
      
    } catch (error) {
      console.error('User Account Error:', error);
      res.status(500).render('error', {
        title: 'L·ªói - SportShop',
        error: 'Kh√¥ng th·ªÉ t·∫£i trang t√†i kho·∫£n',
        currentPage: 'error'
      });
    }
  }

  /**
   * Trang ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n
   * GET /user/profile
   */
  static async showProfile(req, res) {
    try {
      const userId = req.session.user.id;
      const user = await User.findById(userId);
      
      if (!user) {
        req.flash('error', 'Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n');
        return res.redirect('/auth/login');
      }
      
      res.render('user/profile', {
        title: 'Th√¥ng tin c√° nh√¢n - SportShop',
        currentPage: 'profile',
        user: user,
        success: req.flash('success'),
        error: req.flash('error')
      });
      
    } catch (error) {
      console.error('User ShowProfile Error:', error);
      res.status(500).render('error', {
        title: 'L·ªói - SportShop',
        error: 'Kh√¥ng th·ªÉ t·∫£i trang th√¥ng tin c√° nh√¢n'
      });
    }
  }

  /**
   * C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
   * POST /user/profile
   */
  static async updateProfile(req, res) {
    try {
      const { firstName, lastName, phone, birthDate, gender } = req.body;
      const userId = req.session.user.id;
      
      console.log('üìù Update profile request:', {
        userId,
        firstName,
        lastName,
        phone,
        birthDate,
        gender
      });
      
      const user = await User.findById(userId);
      if (!user) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n'
        });
      }
      
      // Validation
      const errors = [];
      
      if (!firstName || firstName.trim().length < 2) {
        errors.push('H·ªç ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±');
      }
      
      if (!lastName || lastName.trim().length < 2) {
        errors.push('T√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±');
      }
      
      if (phone && !/^[0-9]{10,11}$/.test(phone.replace(/[\s\-\(\)]/g, ''))) {
        errors.push('S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá');
      }
      
      if (birthDate && new Date(birthDate) > new Date()) {
        errors.push('Ng√†y sinh kh√¥ng h·ª£p l·ªá');
      }
      
      if (errors.length > 0) {
        return res.status(400).json({
          success: false,
          message: errors.join('; ')
        });
      }
      
      // Update user info
      user.firstName = firstName?.trim() || user.firstName;
      user.lastName = lastName?.trim() || user.lastName;
      user.phone = phone ? phone.replace(/[\s\-\(\)]/g, '') : user.phone;
      user.birthDate = birthDate || user.birthDate;
      user.gender = gender || user.gender;
      
      await user.save();
      
      // Update session
      req.session.user.firstName = user.firstName;
      req.session.user.lastName = user.lastName;
      req.session.user.fullName = user.fullName;
      req.session.user.initials = user.initials;
      
      console.log('‚úÖ Profile updated successfully:', {
        userId: user._id,
        fullName: user.fullName,
        phone: user.phone
      });
      
      res.json({
        success: true,
        message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!',
        data: {
          fullName: user.fullName,
          initials: user.initials,
          firstName: user.firstName,
          lastName: user.lastName,
          phone: user.phone,
          birthDate: user.birthDate,
          gender: user.gender
        }
      });
      
    } catch (error) {
      console.error('Update Profile Error:', error);
      res.status(500).json({
        success: false,
        message: 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t th√¥ng tin'
      });
    }
  }

  /**
   * Trang danh s√°ch ƒë·ªãa ch·ªâ
   * GET /user/addresses
   */
  static async showAddresses(req, res) {
    try {
      const userId = req.session.user.id;
      const user = await User.findById(userId);
      
      if (!user) {
        req.flash('error', 'Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n');
        return res.redirect('/auth/login');
      }
      
      res.render('user/addresses', {
        title: 'ƒê·ªãa ch·ªâ giao h√†ng - SportShop',
        currentPage: 'addresses',
        user: user,
        addresses: user.addresses,
        success: req.flash('success'),
        error: req.flash('error')
      });
      
    } catch (error) {
      console.error('User ShowAddresses Error:', error);
      res.status(500).render('error', {
        title: 'L·ªói - SportShop',
        error: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë·ªãa ch·ªâ'
      });
    }
  }

  /**
   * Th√™m ƒë·ªãa ch·ªâ m·ªõi
   * POST /user/addresses
   */
  static async addAddress(req, res) {
    try {
      const { type, fullName, phone, address, district, city, zipCode, isDefault } = req.body;
      const userId = req.session.user.id;
      
      const user = await User.findById(userId);
      if (!user) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n'
        });
      }
      
      // Validation
      if (!fullName || !phone || !address || !district) {
        return res.status(400).json({
          success: false,
          message: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc'
        });
      }
      
      const addressData = {
        type: type || 'home',
        fullName: fullName.trim(),
        phone: phone.replace(/[\s\-\(\)]/g, ''),
        address: address.trim(),
        district: district,
        city: city || 'H√† N·ªôi',
        zipCode: zipCode || '',
        isDefault: !!isDefault
      };
      
      await user.addAddress(addressData);
      
      console.log('‚úÖ Address added:', {
        userId: user._id,
        addressCount: user.addresses.length
      });
      
      res.json({
        success: true,
        message: 'Th√™m ƒë·ªãa ch·ªâ th√†nh c√¥ng!',
        data: {
          addressCount: user.addresses.length
        }
      });
      
    } catch (error) {
      console.error('Add Address Error:', error);
      res.status(500).json({
        success: false,
        message: 'C√≥ l·ªói x·∫£y ra khi th√™m ƒë·ªãa ch·ªâ'
      });
    }
  }

  /**
   * C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ
   * PUT /user/addresses/:addressId
   */
  static async updateAddress(req, res) {
    try {
      const { addressId } = req.params;
      const { type, fullName, phone, address, district, city, zipCode, isDefault } = req.body;
      const userId = req.session.user.id;
      
      const user = await User.findById(userId);
      if (!user) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n'
        });
      }
      
      const updateData = {
        type: type || 'home',
        fullName: fullName?.trim(),
        phone: phone?.replace(/[\s\-\(\)]/g, ''),
        address: address?.trim(),
        district: district,
        city: city || 'H√† N·ªôi',
        zipCode: zipCode || '',
        isDefault: !!isDefault
      };
      
      const result = await user.updateAddress(addressId, updateData);
      if (!result) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ'
        });
      }
      
      console.log('‚úÖ Address updated:', {
        userId: user._id,
        addressId: addressId
      });
      
      res.json({
        success: true,
        message: 'C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ th√†nh c√¥ng!'
      });
      
    } catch (error) {
      console.error('Update Address Error:', error);
      res.status(500).json({
        success: false,
        message: 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ'
      });
    }
  }

  /**
   * X√≥a ƒë·ªãa ch·ªâ
   * DELETE /user/addresses/:addressId
   */
  static async deleteAddress(req, res) {
    try {
      const { addressId } = req.params;
      const userId = req.session.user.id;
      
      const user = await User.findById(userId);
      if (!user) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n'
        });
      }
      
      const result = await user.removeAddress(addressId);
      if (!result) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ'
        });
      }
      
      console.log('‚úÖ Address deleted:', {
        userId: user._id,
        addressId: addressId,
        remainingAddresses: user.addresses.length
      });
      
      res.json({
        success: true,
        message: 'X√≥a ƒë·ªãa ch·ªâ th√†nh c√¥ng!',
        data: {
          addressCount: user.addresses.length
        }
      });
      
    } catch (error) {
      console.error('Delete Address Error:', error);
      res.status(500).json({
        success: false,
        message: 'C√≥ l·ªói x·∫£y ra khi x√≥a ƒë·ªãa ch·ªâ'
      });
    }
  }

  /**
   * Trang s·∫£n ph·∫©m y√™u th√≠ch
   * GET /user/favorites
   */
  static async showFavorites(req, res) {
    try {
      const userId = req.session.user.id;
      const user = await User.findById(userId).populate('favoriteProducts');
      
      if (!user) {
        req.flash('error', 'Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n');
        return res.redirect('/auth/login');
      }
      
      res.render('user/favorites', {
        title: 'S·∫£n ph·∫©m y√™u th√≠ch - SportShop',
        currentPage: 'favorites',
        user: user,
        favoriteProducts: user.favoriteProducts,
        success: req.flash('success'),
        error: req.flash('error')
      });
      
    } catch (error) {
      console.error('User ShowFavorites Error:', error);
      res.status(500).render('error', {
        title: 'L·ªói - SportShop',
        error: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch y√™u th√≠ch'
      });
    }
  }

  /**
   * Th√™m/X√≥a s·∫£n ph·∫©m y√™u th√≠ch
   * POST /user/favorites/:productId
   */
  static async toggleFavorite(req, res) {
    try {
      const { productId } = req.params;
      const userId = req.session.user.id;
      
      const user = await User.findById(userId);
      if (!user) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n'
        });
      }
      
      // Check if product exists
      const product = await Product.findById(productId);
      if (!product) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m'
        });
      }
      
      const favoriteIndex = user.favoriteProducts.indexOf(productId);
      let action = '';
      
      if (favoriteIndex > -1) {
        // Remove from favorites
        user.favoriteProducts.splice(favoriteIndex, 1);
        action = 'removed';
      } else {
        // Add to favorites
        user.favoriteProducts.push(productId);
        action = 'added';
      }
      
      await user.save();
      
      console.log('‚ù§Ô∏è Favorite toggled:', {
        userId: user._id,
        productId: productId,
        productName: product.name,
        action: action,
        totalFavorites: user.favoriteProducts.length
      });
      
      res.json({
        success: true,
        message: action === 'added' ? 
          `ƒê√£ th√™m ${product.name} v√†o danh s√°ch y√™u th√≠ch` : 
          `ƒê√£ x√≥a ${product.name} kh·ªèi danh s√°ch y√™u th√≠ch`,
        data: {
          isFavorite: action === 'added',
          favoriteCount: user.favoriteProducts.length
        }
      });
      
    } catch (error) {
      console.error('Toggle Favorite Error:', error);
      res.status(500).json({
        success: false,
        message: 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t danh s√°ch y√™u th√≠ch'
      });
    }
  }

  /**
   * Thay ƒë·ªïi m·∫≠t kh·∫©u
   * POST /user/change-password
   */
  static async changePassword(req, res) {
    try {
      const { currentPassword, newPassword, confirmPassword } = req.body;
      const userId = req.session.user.id;
      
      const user = await User.findById(userId);
      if (!user) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n'
        });
      }
      
      // Validation
      if (!currentPassword || !newPassword || !confirmPassword) {
        return res.status(400).json({
          success: false,
          message: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin'
        });
      }
      
      if (newPassword.length < 6) {
        return res.status(400).json({
          success: false,
          message: 'M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±'
        });
      }
      
      if (newPassword !== confirmPassword) {
        return res.status(400).json({
          success: false,
          message: 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp'
        });
      }
      
      // Verify current password
      const isCurrentPasswordValid = await user.comparePassword(currentPassword);
      if (!isCurrentPasswordValid) {
        return res.status(400).json({
          success: false,
          message: 'M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng'
        });
      }
      
      // Update password
      user.password = newPassword;
      await user.save();
      
      console.log('üîí Password changed:', {
        userId: user._id,
        email: user.email
      });
      
      res.json({
        success: true,
        message: 'Thay ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!'
      });
      
    } catch (error) {
      console.error('Change Password Error:', error);
      res.status(500).json({
        success: false,
        message: 'C√≥ l·ªói x·∫£y ra khi thay ƒë·ªïi m·∫≠t kh·∫©u'
      });
    }
  }

  /**
   * API: L·∫•y th√¥ng tin t√†i kho·∫£n
   * GET /user/api/profile
   */
  static async getProfileAPI(req, res) {
    try {
      const userId = req.session.user.id;
      const user = await User.findById(userId).select('-password -emailVerificationToken -passwordResetToken');
      
      if (!user) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n'
        });
      }
      
      res.json({
        success: true,
        data: user.toPublicJSON()
      });
      
    } catch (error) {
      console.error('Get Profile API Error:', error);
      res.status(500).json({
        success: false,
        message: 'C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin t√†i kho·∫£n'
      });
    }
  }
}

module.exports = UserController;