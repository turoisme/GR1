/**
 * Cart Controller - MongoDB Version - ƒê·∫ßy ƒë·ªß
 * X·ª≠ l√Ω gi·ªè h√†ng v·ªõi MongoDB v√† checkout ch·ªâ giao h√†ng H√† N·ªôi
 */

const Cart = require('../models/Cart');
const Product = require('../models/Product');

class CartController {
  /**
   * Hi·ªÉn th·ªã gi·ªè h√†ng
   * GET /cart
   */
  static async index(req, res) {
    try {
      const sessionId = req.sessionID || req.session.id;
      console.log('üõí Cart index - Session ID:', sessionId);
      
      // Get cart for current session
      const cart = await Cart.findBySessionId(sessionId);
      console.log('üì¶ Cart found:', {
        sessionId: cart.sessionId,
        itemCount: cart.totalItems,
        items: cart.items.length,
        total: cart.getFormattedFinalTotal()
      });
      
      res.render('cart/index', {
        title: 'Gi·ªè h√†ng - SportShop',
        cart: cart,
        currentPage: 'cart'
      });
      
    } catch (error) {
      console.error('‚ùå Cart Controller Index Error:', error);
      res.status(500).render('error', {
        title: 'L·ªói gi·ªè h√†ng - SportShop',
        error: 'Kh√¥ng th·ªÉ t·∫£i gi·ªè h√†ng',
        currentPage: 'error'
      });
    }
  }

  /**
   * Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
   * POST /cart/add
   */
  static async addItem(req, res) {
    try {
      const { productId, quantity = 1, color, size } = req.body;
      const sessionId = req.sessionID || req.session.id;
      
      console.log('‚ûï Add to cart request:', { productId, quantity, color, size, sessionId });
      
      // Validation c∆° b·∫£n
      if (!productId) {
        return res.status(400).json({
          success: false,
          message: 'ID s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc'
        });
      }
      
      if (!color || !size) {
        return res.status(400).json({
          success: false,
          message: 'Vui l√≤ng ch·ªçn m√†u s·∫Øc v√† k√≠ch c·ª°'
        });
      }
      
      // Validate quantity
      const qty = parseInt(quantity);
      if (isNaN(qty) || qty < 1 || qty > 10) {
        return res.status(400).json({
          success: false,
          message: 'S·ªë l∆∞·ª£ng ph·∫£i t·ª´ 1 ƒë·∫øn 10'
        });
      }
      
      // Validate ObjectId format
      if (!productId.match(/^[0-9a-fA-F]{24}$/)) {
        return res.status(400).json({
          success: false,
          message: 'ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá'
        });
      }
      
      // Get product to validate
      const product = await Product.findById(productId);
      if (!product) {
        return res.status(404).json({
          success: false,
          message: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i'
        });
      }
      
      if (!product.inStock) {
        return res.status(400).json({
          success: false,
          message: 'S·∫£n ph·∫©m ƒë√£ h·∫øt h√†ng'
        });
      }
      
      // Validate color and size
      if (!product.colors.includes(color)) {
        return res.status(400).json({
          success: false,
          message: 'M√†u s·∫Øc kh√¥ng h·ª£p l·ªá'
        });
      }
      
      if (!product.sizes.includes(size)) {
        return res.status(400).json({
          success: false,
          message: 'K√≠ch c·ª° kh√¥ng h·ª£p l·ªá'
        });
      }
      
      // Get or create cart
      const cart = await Cart.findBySessionId(sessionId);
      
      // Add item to cart
      await cart.addItem(productId, qty, color, size);
      
      console.log('‚úÖ Item added to cart:', {
        sessionId: cart.sessionId,
        totalItems: cart.totalItems,
        productName: product.name
      });
      
      res.json({
        success: true,
        message: `ƒê√£ th√™m ${product.name} (${color}, ${size}) v√†o gi·ªè h√†ng`,
        data: {
          cartItemCount: cart.totalItems,
          cartTotal: cart.getFormattedTotal(),
          cartFinalTotal: cart.getFormattedFinalTotal(),
          product: {
            name: product.name,
            color: color,
            size: size,
            quantity: qty
          }
        }
      });
      
    } catch (error) {
      console.error('‚ùå Cart Controller AddItem Error:', error);
      res.status(500).json({
        success: false,
        message: 'L·ªói khi th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng',
        error: error.message
      });
    }
  }

  /**
   * C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
   * PUT /cart/update/:itemId
   */
  static async updateItem(req, res) {
    try {
      const { itemId } = req.params;
      const { quantity } = req.body;
      const sessionId = req.sessionID || req.session.id;
      
      console.log('üîÑ Update cart item:', { itemId, quantity, sessionId });
      
      // Validate quantity
      const qty = parseInt(quantity);
      if (isNaN(qty) || qty < 1 || qty > 10) {
        return res.status(400).json({
          success: false,
          message: 'S·ªë l∆∞·ª£ng ph·∫£i t·ª´ 1 ƒë·∫øn 10'
        });
      }
      
      // Get cart
      const cart = await Cart.findBySessionId(sessionId);
      
      if (cart.isEmpty()) {
        return res.status(400).json({
          success: false,
          message: 'Gi·ªè h√†ng tr·ªëng'
        });
      }
      
      // Find item to get product name for message
      const item = cart.items.find(item => item._id.toString() === itemId);
      if (!item) {
        return res.status(404).json({
          success: false,
          message: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong gi·ªè h√†ng'
        });
      }
      
      const productName = item.product.name || 'S·∫£n ph·∫©m';
      
      // Update item quantity
      cart.updateItemQuantity(itemId, qty);
      await cart.save();
      
      console.log('‚úÖ Cart item updated:', {
        productName: productName,
        newQuantity: qty,
        newTotal: cart.getFormattedFinalTotal()
      });
      
      res.json({
        success: true,
        message: `ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng ${productName}`,
        data: {
          cartItemCount: cart.totalItems,
          cartTotal: cart.getFormattedTotal(),
          cartFinalTotal: cart.getFormattedFinalTotal(),
          item: {
            id: itemId,
            quantity: qty,
            subtotal: item.subtotal
          }
        }
      });
      
    } catch (error) {
      console.error('‚ùå Cart Controller UpdateItem Error:', error);
      res.status(500).json({
        success: false,
        message: 'L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m',
        error: error.message
      });
    }
  }

  /**
   * X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
   * DELETE /cart/remove/:itemId
   */
  static async removeItem(req, res) {
    try {
      const { itemId } = req.params;
      const sessionId = req.sessionID || req.session.id;
      
      console.log('üóëÔ∏è Remove cart item:', { itemId, sessionId });
      
      // Get cart
      const cart = await Cart.findBySessionId(sessionId);
      
      if (cart.isEmpty()) {
        return res.status(400).json({
          success: false,
          message: 'Gi·ªè h√†ng tr·ªëng'
        });
      }
      
      // Find item to get product name for message
      const item = cart.items.find(item => item._id.toString() === itemId);
      const productName = item ? (item.product.name || 'S·∫£n ph·∫©m') : 'S·∫£n ph·∫©m';
      
      if (!item) {
        return res.status(404).json({
          success: false,
          message: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong gi·ªè h√†ng'
        });
      }
      
      // Remove item
      cart.removeItem(itemId);
      await cart.save();
      
      console.log('‚úÖ Cart item removed:', {
        productName: productName,
        remainingItems: cart.totalItems
      });
      
      res.json({
        success: true,
        message: `ƒê√£ x√≥a ${productName} kh·ªèi gi·ªè h√†ng`,
        data: {
          cartItemCount: cart.totalItems,
          cartTotal: cart.getFormattedTotal(),
          cartFinalTotal: cart.getFormattedFinalTotal(),
          isEmpty: cart.isEmpty()
        }
      });
      
    } catch (error) {
      console.error('‚ùå Cart Controller RemoveItem Error:', error);
      res.status(500).json({
        success: false,
        message: 'L·ªói khi x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng',
        error: error.message
      });
    }
  }

  /**
   * X√≥a t·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè h√†ng
   * DELETE /cart/clear
   */
  static async clearCart(req, res) {
    try {
      const sessionId = req.sessionID || req.session.id;
      
      console.log('üßπ Clear cart:', { sessionId });
      
      // Get cart
      const cart = await Cart.findBySessionId(sessionId);
      
      if (cart.isEmpty()) {
        return res.status(400).json({
          success: false,
          message: 'Gi·ªè h√†ng ƒë√£ tr·ªëng'
        });
      }
      
      const itemCount = cart.totalItems;
      
      // Clear cart
      cart.clear();
      await cart.save();
      
      console.log('‚úÖ Cart cleared:', {
        sessionId: sessionId,
        removedItems: itemCount
      });
      
      res.json({
        success: true,
        message: `ƒê√£ x√≥a t·∫•t c·∫£ ${itemCount} s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng`,
        data: {
          cartItemCount: 0,
          cartTotal: '0ƒë',
          cartFinalTotal: '0ƒë',
          isEmpty: true
        }
      });
      
    } catch (error) {
      console.error('‚ùå Cart Controller ClearCart Error:', error);
      res.status(500).json({
        success: false,
        message: 'L·ªói khi x√≥a gi·ªè h√†ng',
        error: error.message
      });
    }
  }

  /**
   * L·∫•y th√¥ng tin gi·ªè h√†ng (API)
   * GET /cart/api
   */
  static async getCartInfo(req, res) {
    try {
      const sessionId = req.sessionID || req.session.id;
      const cart = await Cart.findBySessionId(sessionId);
      
      console.log('üìä Get cart info:', {
        sessionId: sessionId,
        items: cart.totalItems
      });
      
      res.json({
        success: true,
        data: {
          sessionId: cart.sessionId,
          items: cart.items.map(item => ({
            id: item._id,
            product: {
              id: item.product._id,
              name: item.product.name,
              image: item.product.image,
              price: item.product.price
            },
            quantity: item.quantity,
            color: item.color,
            size: item.size,
            priceAtTime: item.priceAtTime,
            subtotal: item.subtotal,
            formattedSubtotal: item.subtotal.toLocaleString('vi-VN') + 'ƒë'
          })),
          summary: {
            totalItems: cart.totalItems,
            totalPrice: cart.totalPrice,
            formattedTotalPrice: cart.getFormattedTotal(),
            shippingFee: cart.shippingFee,
            formattedShippingFee: cart.getFormattedShippingFee(),
            finalTotal: cart.finalTotal,
            formattedFinalTotal: cart.getFormattedFinalTotal(),
            isEmpty: cart.isEmpty()
          }
        }
      });
      
    } catch (error) {
      console.error('‚ùå Cart Controller GetCartInfo Error:', error);
      res.status(500).json({
        success: false,
        message: 'L·ªói khi l·∫•y th√¥ng tin gi·ªè h√†ng',
        error: error.message
      });
    }
  }

  /**
   * Trang checkout
   * GET /cart/checkout
   */
  static async checkout(req, res) {
    try {
      const sessionId = req.sessionID || req.session.id;
      const cart = await Cart.findBySessionId(sessionId);
      
      console.log('üí≥ Checkout page:', {
        sessionId: sessionId,
        items: cart.totalItems,
        total: cart.getFormattedFinalTotal()
      });
      
      if (cart.isEmpty()) {
        console.log('‚ö†Ô∏è Empty cart redirect to cart page');
        return res.redirect('/cart');
      }
      
      res.render('cart/checkout', {
        title: 'Thanh to√°n - SportShop',
        cart: cart,
        currentPage: 'checkout'
      });
      
    } catch (error) {
      console.error('‚ùå Cart Controller Checkout Error:', error);
      res.status(500).render('error', {
        title: 'L·ªói thanh to√°n - SportShop',
        error: 'Kh√¥ng th·ªÉ t·∫£i trang thanh to√°n',
        currentPage: 'error'
      });
    }
  }

  /**
   * X·ª≠ l√Ω thanh to√°n - CH·ªà GIAO H√ÄNG H√Ä N·ªòI
   * POST /cart/checkout
   */
  static async processCheckout(req, res) {
    try {
      const sessionId = req.sessionID || req.session.id;
      const cart = await Cart.findBySessionId(sessionId);
      
      console.log('üè™ Process checkout:', {
        sessionId: sessionId,
        items: cart.totalItems,
        total: cart.finalTotal
      });
      
      if (cart.isEmpty()) {
        return res.status(400).json({
          success: false,
          message: 'Gi·ªè h√†ng tr·ªëng'
        });
      }
      
      const {
        customerName,
        customerEmail,
        customerPhone,
        shippingAddress,
        city,
        district,
        paymentMethod = 'cod',
        notes = ''
      } = req.body;
      
      // Validation ƒë·∫ßy ƒë·ªß
      if (!customerName || !customerEmail || !customerPhone || !shippingAddress || !district) {
        return res.status(400).json({
          success: false,
          message: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc'
        });
      }
      
      // ‚ö†Ô∏è CH√çNH S√ÅCH: CH·ªà GIAO H√ÄNG H√Ä N·ªòI
      if (city !== 'hanoi') {
        return res.status(400).json({
          success: false,
          message: 'Xin l·ªói! Hi·ªán t·∫°i ch√∫ng t√¥i ch·ªâ giao h√†ng trong khu v·ª±c H√† N·ªôi.'
        });
      }
      
      // Validate email format
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(customerEmail)) {
        return res.status(400).json({
          success: false,
          message: 'ƒê·ªãnh d·∫°ng email kh√¥ng h·ª£p l·ªá'
        });
      }
      
      // Validate phone format (10-11 digits)
      const phoneRegex = /^[0-9]{10,11}$/;
      const cleanPhone = customerPhone.replace(/[\s\-\(\)]/g, '');
      if (!phoneRegex.test(cleanPhone)) {
        return res.status(400).json({
          success: false,
          message: 'S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10-11 ch·ªØ s·ªë'
        });
      }
      
      // Validate H√† N·ªôi districts
      const hanoiDistricts = [
        'badinh', 'hoankiem', 'tayho', 'longbien', 'caugiay', 'dongda', 
        'haibatrung', 'hoangmai', 'thanhxuan', 'namtulem', 'bactulem', 
        'hadong', 'sontay', 'bavi', 'chuongmy', 'danphuong', 'hoaiduc', 
        'melinh', 'myduc', 'phuxuyen', 'phuctho', 'quocoai', 'socson', 
        'thachthat', 'thanhoai', 'thuynguyen', 'unghoa'
      ];
      
      const normalizedDistrict = district.toLowerCase().replace(/\s+/g, '');
      if (!hanoiDistricts.includes(normalizedDistrict)) {
        return res.status(400).json({
          success: false,
          message: 'Qu·∫≠n/huy·ªán kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng n·∫±m trong khu v·ª±c giao h√†ng'
        });
      }
      
      // Validate payment method
      const validPaymentMethods = ['cod', 'bank', 'momo'];
      if (!validPaymentMethods.includes(paymentMethod)) {
        return res.status(400).json({
          success: false,
          message: 'Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá'
        });
      }
      
      // Generate order ID
      const orderId = 'SP' + Date.now() + Math.floor(Math.random() * 1000);
      
      // Calculate delivery date (1-2 days for Hanoi)
      const deliveryDate = new Date();
      deliveryDate.setDate(deliveryDate.getDate() + (district.includes('noi') ? 1 : 2));
      
      // Create comprehensive order data
      const orderData = {
        // Order Info
        orderId: orderId,
        sessionId: sessionId,
        status: 'confirmed',
        paymentStatus: paymentMethod === 'cod' ? 'pending' : 'waiting_payment',
        
        // Customer Info
        customer: {
          name: customerName.trim(),
          email: customerEmail.toLowerCase().trim(),
          phone: cleanPhone,
          address: {
            detail: shippingAddress.trim(),
            district: district,
            city: 'H√† N·ªôi',
            fullAddress: `${shippingAddress.trim()}, ${district}, H√† N·ªôi`
          }
        },
        
        // Items Info
        items: cart.items.map(item => ({
          productId: item.product._id,
          productName: item.product.name,
          productImage: item.product.image,
          quantity: item.quantity,
          color: item.color,
          size: item.size,
          priceAtTime: item.priceAtTime,
          subtotal: item.subtotal
        })),
        
        // Pricing Info
        pricing: {
          totalItems: cart.totalItems,
          subtotal: cart.totalPrice,
          shippingFee: cart.shippingFee,
          finalTotal: cart.finalTotal,
          currency: 'VND'
        },
        
        // Payment Info
        payment: {
          method: paymentMethod,
          status: paymentMethod === 'cod' ? 'pending' : 'waiting_payment',
          bankInfo: paymentMethod === 'bank' ? {
            bankName: 'Vietcombank',
            accountNumber: '1234567890',
            accountName: 'Nguy·ªÖn Thanh T√¢n',
            transferContent: `SportShop ${customerName.split(' ').pop()}`
          } : null
        },
        
        // Delivery Info
        delivery: {
          method: 'standard',
          estimatedDate: deliveryDate,
          fee: cart.shippingFee,
          address: `${shippingAddress.trim()}, ${district}, H√† N·ªôi`,
          notes: notes.trim(),
          trackingNumber: 'SP' + Date.now()
        },
        
        // Timestamps
        createdAt: new Date(),
        updatedAt: new Date()
      };
      
      // Log order creation
      console.log('üì¶ New order created:', {
        orderId: orderData.orderId,
        customer: orderData.customer.name,
        district: orderData.customer.address.district,
        total: orderData.pricing.finalTotal.toLocaleString('vi-VN') + 'ƒë',
        paymentMethod: orderData.payment.method,
        items: orderData.pricing.totalItems
      });
      
      // TODO: Save order to database (Order model)
      // const Order = require('../models/Order');
      // const savedOrder = await Order.create(orderData);
      
      // TODO: Send confirmation email
      // await EmailService.sendOrderConfirmation(orderData);
      
      // TODO: Send SMS notification
      // await SMSService.sendOrderNotification(orderData);
      
      // TODO: Update product stock
      // await ProductService.updateStock(orderData.items);
      
      // TODO: Create delivery tracking
      // await DeliveryService.createTracking(orderData);
      
      // Clear cart after successful checkout
      cart.status = 'checked_out';
      cart.orderId = orderId;
      await cart.save();
      
      // Create response message based on payment method
      let responseMessage = '';
      let additionalInfo = {};
      
      switch (paymentMethod) {
        case 'cod':
          responseMessage = `üéâ ƒê·∫∑t h√†ng th√†nh c√¥ng! M√£ ƒë∆°n h√†ng: ${orderId}. Ch√∫ng t√¥i s·∫Ω giao h√†ng v√† thu ti·ªÅn t·∫°i ƒë·ªãa ch·ªâ c·ªßa b·∫°n trong 1-2 ng√†y t·ªõi.`;
          additionalInfo = {
            deliveryTime: '1-2 ng√†y',
            paymentNote: 'Thanh to√°n khi nh·∫≠n h√†ng'
          };
          break;
          
        case 'bank':
          responseMessage = `üéâ ƒê·∫∑t h√†ng th√†nh c√¥ng! M√£ ƒë∆°n h√†ng: ${orderId}. Vui l√≤ng chuy·ªÉn kho·∫£n theo th√¥ng tin ƒë√£ cung c·∫•p. Ch√∫ng t√¥i s·∫Ω x·ª≠ l√Ω ƒë∆°n h√†ng ngay sau khi nh·∫≠n ƒë∆∞·ª£c thanh to√°n.`;
          additionalInfo = {
            transferInfo: orderData.payment.bankInfo,
            paymentNote: 'Vui l√≤ng chuy·ªÉn kho·∫£n trong 30 ph√∫t'
          };
          break;
          
        case 'momo':
          responseMessage = `üéâ ƒê·∫∑t h√†ng th√†nh c√¥ng! M√£ ƒë∆°n h√†ng: ${orderId}. Vui l√≤ng thanh to√°n qua MoMo. Ch√∫ng t√¥i s·∫Ω x·ª≠ l√Ω ƒë∆°n h√†ng ngay sau khi nh·∫≠n ƒë∆∞·ª£c thanh to√°n.`;
          additionalInfo = {
            paymentNote: 'Thanh to√°n qua v√≠ MoMo'
          };
          break;
      }
      
      // Success response
      res.json({
        success: true,
        message: responseMessage,
        data: {
          orderId: orderData.orderId,
          trackingNumber: orderData.delivery.trackingNumber,
          totalAmount: orderData.pricing.finalTotal,
          formattedTotal: orderData.pricing.finalTotal.toLocaleString('vi-VN') + 'ƒë',
          paymentMethod: orderData.payment.method,
          estimatedDelivery: orderData.delivery.estimatedDate.toLocaleDateString('vi-VN'),
          customer: {
            name: orderData.customer.name,
            phone: orderData.customer.phone,
            address: orderData.customer.address.fullAddress
          },
          ...additionalInfo
        }
      });
      
    } catch (error) {
      console.error('‚ùå Cart Controller ProcessCheckout Error:', error);
      res.status(500).json({
        success: false,
        message: 'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau.',
        error: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  }

  /**
   * Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng
   * GET /cart/order/:orderId
   */
  static async checkOrderStatus(req, res) {
    try {
      const { orderId } = req.params;
      
      console.log('üîç Check order status:', { orderId });
      
      // TODO: Get order from database
      // const Order = require('../models/Order');
      // const order = await Order.findOne({ orderId });
      
      // Mock order status for now
      const mockOrder = {
        orderId: orderId,
        status: 'confirmed',
        paymentStatus: 'pending',
        estimatedDelivery: new Date(Date.now() + 24 * 60 * 60 * 1000),
        trackingNumber: 'SP' + orderId.slice(-8)
      };
      
      res.json({
        success: true,
        data: mockOrder
      });
      
    } catch (error) {
      console.error('‚ùå Cart Controller CheckOrderStatus Error:', error);
      res.status(500).json({
        success: false,
        message: 'L·ªói khi ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng'
      });
    }
  }

  /**
   * H·ªßy ƒë∆°n h√†ng
   * POST /cart/cancel/:orderId
   */
  static async cancelOrder(req, res) {
    try {
      const { orderId } = req.params;
      const { reason = 'Kh√°ch h√†ng h·ªßy' } = req.body;
      
      console.log('‚ùå Cancel order:', { orderId, reason });
      
      // TODO: Update order status in database
      // const Order = require('../models/Order');
      // await Order.updateOne({ orderId }, { 
      //   status: 'cancelled', 
      //   cancelReason: reason,
      //   cancelledAt: new Date()
      // });
      
      res.json({
        success: true,
        message: `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng`
      });
      
    } catch (error) {
      console.error('‚ùå Cart Controller CancelOrder Error:', error);
      res.status(500).json({
        success: false,
        message: 'L·ªói khi h·ªßy ƒë∆°n h√†ng'
      });
    }
  }
}

module.exports = CartController;