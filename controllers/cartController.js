/**
 * Cart Controller - Fixed Version with Enhanced Order Creation
 * X·ª≠ l√Ω gi·ªè h√†ng v·ªõi MongoDB v√† checkout ƒë·∫£m b·∫£o ƒë∆°n h√†ng hi·ªÉn th·ªã
 */

const Cart = require('../models/Cart');
const Product = require('../models/Product');
const Order = require('../models/Order');

class CartController {
  /**
   * Hi·ªÉn th·ªã gi·ªè h√†ng
   * GET /cart
   */
  static async index(req, res) {
    try {
      const sessionId = req.sessionID || req.session.id;
      const userId = req.session?.user?.id || null;
      
      console.log('üõí Cart index - Session ID:', sessionId, 'User ID:', userId);
      
      // Get cart for current session
      const cart = await Cart.findBySessionId(sessionId, userId);
      
      console.log('üì¶ Cart found:', {
        sessionId: cart.sessionId,
        itemCount: cart.totalItems,
        items: cart.items.length,
        total: cart.getFormattedFinalTotal()
      });
      
      res.render('cart/index', {
        title: 'Gi·ªè h√†ng - SportShop',
        cart: cart,
        currentPage: 'cart',
        user: req.session?.user || null,
        success: req.flash('success'),
        error: req.flash('error')
      });
      
    } catch (error) {
      console.error('‚ùå Cart Controller Index Error:', error);
      res.status(500).render('error', {
        title: 'L·ªói gi·ªè h√†ng - SportShop',
        error: 'Kh√¥ng th·ªÉ t·∫£i gi·ªè h√†ng',
        currentPage: 'error',
        user: req.session?.user || null
      });
    }
  }

  /**
   * Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng v·ªõi m√†u s·∫Øc v√† size
   * POST /cart/add
   */
  static async addItem(req, res) {
    try {
      const { productId, quantity = 1, color, size } = req.body;
      const sessionId = req.sessionID || req.session.id;
      const userId = req.session?.user?.id || null;
      
      console.log('‚ûï Add to cart request:', { 
        productId, quantity, color, size, sessionId, userId 
      });
      
      // Validation c∆° b·∫£n
      if (!productId) {
        return res.status(400).json({
          success: false,
          message: 'ID s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc'
        });
      }
      
      if (!color || !size) {
        return res.status(400).json({
          success: false,
          message: 'Vui l√≤ng ch·ªçn m√†u s·∫Øc v√† k√≠ch c·ª°'
        });
      }
      
      // Validate quantity
      const qty = parseInt(quantity);
      if (isNaN(qty) || qty < 1 || qty > 10) {
        return res.status(400).json({
          success: false,
          message: 'S·ªë l∆∞·ª£ng ph·∫£i t·ª´ 1 ƒë·∫øn 10'
        });
      }
      
      // X·ª≠ l√Ω s·∫£n ph·∫©m m·∫´u (cho demo)
      if (productId.startsWith('sample') || productId.startsWith('fallback')) {
        console.log('üì¶ Adding sample product to cart');
        
        // T·∫°o sample cart response cho demo
        const sampleProducts = {
          'sample1': { name: 'Gi√†y ch·∫°y b·ªô Nike Air Max', price: 2500000 },
          'sample2': { name: '√Åo th·ªÉ thao Adidas ClimaTech', price: 850000 },
          'sample3': { name: 'Qu·∫ßn short Nike Dri-FIT', price: 650000 },
          'sample4': { name: '√Åo hoodie Under Armour', price: 1200000 },
          'sample5': { name: 'Gi√†y tennis Puma Court', price: 1800000 },
          'sample6': { name: 'Qu·∫ßn legging Adidas', price: 750000 },
          'fallback1': { name: 'S·∫£n ph·∫©m th·ªÉ thao', price: 500000 }
        };
        
        const product = sampleProducts[productId];
        if (!product) {
          return res.status(404).json({
            success: false,
            message: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i'
          });
        }
        
        // Initialize session cart if not exists
        if (!req.session.cartItems) {
          req.session.cartItems = [];
        }
        
        // Check if item with same product, color, size exists
        const existingItemIndex = req.session.cartItems.findIndex(item => 
          item.productId === productId && 
          item.color === color && 
          item.size === size
        );
        
        if (existingItemIndex >= 0) {
          // Update existing item
          req.session.cartItems[existingItemIndex].quantity += qty;
          req.session.cartItems[existingItemIndex].subtotal = 
            req.session.cartItems[existingItemIndex].quantity * product.price;
        } else {
          // Add new item
          req.session.cartItems.push({
            productId: productId,
            name: product.name,
            price: product.price,
            quantity: qty,
            color: color,
            size: size,
            subtotal: product.price * qty,
            addedAt: new Date()
          });
        }
        
        // Calculate totals
        const totalItems = req.session.cartItems.reduce((sum, item) => sum + item.quantity, 0);
        const totalPrice = req.session.cartItems.reduce((sum, item) => sum + item.subtotal, 0);
        const shippingFee = totalPrice >= 1000000 ? 0 : 50000;
        const finalTotal = totalPrice + shippingFee;
        
        // Update session cart count
        req.session.cartCount = totalItems;
        
        return res.json({
          success: true,
          message: `ƒê√£ th√™m ${product.name} (${color}, ${size}) v√†o gi·ªè h√†ng`,
          data: {
            cartItemCount: totalItems,
            cartTotal: totalPrice.toLocaleString('vi-VN') + 'ƒë',
            cartFinalTotal: finalTotal.toLocaleString('vi-VN') + 'ƒë',
            shippingFee: shippingFee.toLocaleString('vi-VN') + 'ƒë',
            product: {
              name: product.name,
              color: color,
              size: size,
              quantity: qty
            }
          }
        });
      }
      
      // Validate ObjectId format cho s·∫£n ph·∫©m th·ª±c t·ª´ database
      if (!productId.match(/^[0-9a-fA-F]{24}$/)) {
        return res.status(400).json({
          success: false,
          message: 'ID s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá'
        });
      }
      
      // Get product to validate
      const product = await Product.findById(productId);
      if (!product) {
        return res.status(404).json({
          success: false,
          message: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i'
        });
      }
      
      if (!product.inStock) {
        return res.status(400).json({
          success: false,
          message: 'S·∫£n ph·∫©m ƒë√£ h·∫øt h√†ng'
        });
      }
      
      // Validate color and size n·∫øu c√≥ trong product data
      if (product.colors && product.colors.length > 0 && !product.colors.includes(color)) {
        return res.status(400).json({
          success: false,
          message: `M√†u s·∫Øc "${color}" kh√¥ng c√≥ s·∫µn cho s·∫£n ph·∫©m n√†y. M√†u c√≥ s·∫µn: ${product.colors.join(', ')}`
        });
      }
      
      if (product.sizes && product.sizes.length > 0 && !product.sizes.includes(size)) {
        return res.status(400).json({
          success: false,
          message: `K√≠ch c·ª° "${size}" kh√¥ng c√≥ s·∫µn cho s·∫£n ph·∫©m n√†y. Size c√≥ s·∫µn: ${product.sizes.join(', ')}`
        });
      }
      
      // Get or create cart
      const cart = await Cart.findBySessionId(sessionId, userId);
      
      // Add item to cart with color and size
      await cart.addItem(productId, qty, color, size);
      
      console.log('‚úÖ Item added to cart:', {
        sessionId: cart.sessionId,
        totalItems: cart.totalItems,
        productName: product.name,
        color: color,
        size: size
      });
      
      res.json({
        success: true,
        message: `ƒê√£ th√™m ${product.name} (${color}, ${size}) v√†o gi·ªè h√†ng`,
        data: {
          cartItemCount: cart.totalItems,
          cartTotal: cart.getFormattedTotal(),
          cartFinalTotal: cart.getFormattedFinalTotal(),
          shippingFee: cart.getFormattedShippingFee(),
          product: {
            name: product.name,
            color: color,
            size: size,
            quantity: qty
          }
        }
      });
      
    } catch (error) {
      console.error('‚ùå Cart Controller AddItem Error:', error);
      res.status(500).json({
        success: false,
        message: 'L·ªói khi th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng',
        error: error.message
      });
    }
  }

  /**
   * C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
   * PUT /cart/update/:itemId
   */
  static async updateItem(req, res) {
    try {
      const { itemId } = req.params;
      const { quantity } = req.body;
      const sessionId = req.sessionID || req.session.id;
      const userId = req.session?.user?.id || null;
      
      console.log('üîÑ Update cart item:', { itemId, quantity, sessionId });
      
      // Validate quantity
      const qty = parseInt(quantity);
      if (isNaN(qty) || qty < 1 || qty > 10) {
        return res.status(400).json({
          success: false,
          message: 'S·ªë l∆∞·ª£ng ph·∫£i t·ª´ 1 ƒë·∫øn 10'
        });
      }
      
      // Get cart
      const cart = await Cart.findBySessionId(sessionId, userId);
      
      if (cart.isEmpty()) {
        return res.status(400).json({
          success: false,
          message: 'Gi·ªè h√†ng tr·ªëng'
        });
      }
      
      // Find item to get product name for message
      const item = cart.items.find(item => item._id.toString() === itemId);
      if (!item) {
        return res.status(404).json({
          success: false,
          message: 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong gi·ªè h√†ng'
        });
      }
      
      const productName = item.product?.name || 'S·∫£n ph·∫©m';
      const oldQuantity = item.quantity;
      
      // Update item quantity
      cart.updateItemQuantity(itemId, qty);
      await cart.save();
      
      console.log('‚úÖ Cart item updated:', {
        productName: productName,
        oldQuantity: oldQuantity,
        newQuantity: qty,
        newTotal: cart.getFormattedFinalTotal()
      });
      
      res.json({
        success: true,
        message: `ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng ${productName} (${item.color}, ${item.size})`,
        data: {
          cartItemCount: cart.totalItems,
          cartTotal: cart.getFormattedTotal(),
          cartFinalTotal: cart.getFormattedFinalTotal(),
          shippingFee: cart.getFormattedShippingFee(),
          item: {
            id: itemId,
            quantity: qty,
            subtotal: item.subtotal,
            color: item.color,
            size: item.size
          }
        }
      });
      
    } catch (error) {
      console.error('‚ùå Cart Controller UpdateItem Error:', error);
      res.status(500).json({
        success: false,
        message: 'L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m',
        error: error.message
      });
    }
  }

  /**
   * X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
   * DELETE /cart/remove/:itemId
   */
  static async removeItem(req, res) {
    try {
      const { itemId } = req.params;
      const sessionId = req.sessionID || req.session.id;
      const userId = req.session?.user?.id || null;
      
      console.log('üóëÔ∏è Remove cart item:', { itemId, sessionId });
      
      // Get cart
      const cart = await Cart.findBySessionId(sessionId, userId);
      
      if (cart.isEmpty()) {
        return res.status(400).json({
          success: false,
          message: 'Gi·ªè h√†ng tr·ªëng'
        });
      }
      
      // Find item to get product name for message
      const item = cart.items.find(item => item._id.toString() === itemId);
      const productName = item ? 
        `${item.product?.name || 'S·∫£n ph·∫©m'} (${item.color}, ${item.size})` : 
        'S·∫£n ph·∫©m';
      
      // Remove item
      cart.removeItem(itemId);
      await cart.save();
      
      console.log('‚úÖ Cart item removed:', {
        productName: productName,
        newTotal: cart.getFormattedFinalTotal()
      });
      
      res.json({
        success: true,
        message: `ƒê√£ x√≥a ${productName} kh·ªèi gi·ªè h√†ng`,
        data: {
          cartItemCount: cart.totalItems,
          cartTotal: cart.getFormattedTotal(),
          cartFinalTotal: cart.getFormattedFinalTotal(),
          shippingFee: cart.getFormattedShippingFee(),
          removedItemId: itemId
        }
      });
      
    } catch (error) {
      console.error('‚ùå Cart Controller RemoveItem Error:', error);
      res.status(500).json({
        success: false,
        message: 'L·ªói khi x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng',
        error: error.message
      });
    }
  }

  /**
   * X√≥a t·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè h√†ng
   * DELETE /cart/clear
   */
  static async clearCart(req, res) {
    try {
      const sessionId = req.sessionID || req.session.id;
      const userId = req.session?.user?.id || null;
      
      console.log('üßπ Clear cart:', { sessionId });
      
      // Get cart
      const cart = await Cart.findBySessionId(sessionId, userId);
      
      if (cart.isEmpty()) {
        return res.status(400).json({
          success: false,
          message: 'Gi·ªè h√†ng ƒë√£ tr·ªëng'
        });
      }
      
      const itemCount = cart.totalItems;
      
      // Clear cart
      cart.clear();
      await cart.save();
      
      // Clear session cart for sample products
      if (req.session.cartItems) {
        req.session.cartItems = [];
        req.session.cartCount = 0;
      }
      
      console.log('‚úÖ Cart cleared:', { itemCount });
      
      res.json({
        success: true,
        message: `ƒê√£ x√≥a ${itemCount} s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng`,
        data: {
          cartItemCount: 0,
          cartTotal: '0ƒë',
          cartFinalTotal: '0ƒë',
          shippingFee: '0ƒë'
        }
      });
      
    } catch (error) {
      console.error('‚ùå Cart Controller ClearCart Error:', error);
      res.status(500).json({
        success: false,
        message: 'L·ªói khi x√≥a gi·ªè h√†ng',
        error: error.message
      });
    }
  }

  /**
   * L·∫•y th√¥ng tin gi·ªè h√†ng (API)
   * GET /cart/api
   */
  static async getCartInfo(req, res) {
    try {
      const sessionId = req.sessionID || req.session.id;
      const userId = req.session?.user?.id || null;
      
      console.log('üìä Get cart info:', { sessionId });
      
      // Get cart
      const cart = await Cart.findBySessionId(sessionId, userId);
      
      // Include session cart for sample products
      let sessionCartCount = 0;
      if (req.session.cartItems && req.session.cartItems.length > 0) {
        sessionCartCount = req.session.cartItems.reduce((sum, item) => sum + item.quantity, 0);
      }
      
      const totalCartCount = cart.totalItems + sessionCartCount;
      
      res.json({
        success: true,
        data: {
          cartItemCount: totalCartCount,
          cartTotal: cart.getFormattedTotal(),
          cartFinalTotal: cart.getFormattedFinalTotal(),
          shippingFee: cart.getFormattedShippingFee(),
          isEmpty: cart.isEmpty() && sessionCartCount === 0,
          items: cart.items.length,
          sessionItems: sessionCartCount,
          freeShippingThreshold: 1000000,
          needsForFreeShipping: Math.max(0, 1000000 - cart.totalPrice)
        }
      });
      
    } catch (error) {
      console.error('‚ùå Cart Controller GetCartInfo Error:', error);
      res.status(500).json({
        success: false,
        message: 'L·ªói khi l·∫•y th√¥ng tin gi·ªè h√†ng',
        error: error.message
      });
    }
  }

  /**
   * Trang thanh to√°n
   * GET /cart/checkout
   */
  static async checkout(req, res) {
    try {
      const sessionId = req.sessionID || req.session.id;
      const userId = req.session?.user?.id || null;
      
      console.log('üí≥ Checkout page:', { sessionId });
      
      // Get cart
      const cart = await Cart.findBySessionId(sessionId, userId);
      
      if (cart.isEmpty()) {
        req.flash('error', 'Gi·ªè h√†ng tr·ªëng. Vui l√≤ng th√™m s·∫£n ph·∫©m tr∆∞·ªõc khi thanh to√°n.');
        return res.redirect('/cart');
      }
      
      // Get user info for form pre-fill
      const user = req.session?.user;
      
      res.render('cart/checkout', {
        title: 'Thanh to√°n - SportShop',
        cart: cart,
        user: user,
        currentPage: 'checkout',
        success: req.flash('success'),
        error: req.flash('error')
      });
      
    } catch (error) {
      console.error('‚ùå Cart Controller Checkout Error:', error);
      res.status(500).render('error', {
        title: 'L·ªói thanh to√°n - SportShop',
        error: 'Kh√¥ng th·ªÉ t·∫£i trang thanh to√°n',
        currentPage: 'error',
        user: req.session?.user || null
      });
    }
  }

  /**
   * ‚ú® FIXED: X·ª≠ l√Ω thanh to√°n - ƒê·∫¢M B·∫¢O ƒê∆†N H√ÄNG HI·ªÇN TH·ªä TRONG T√ÄI KHO·∫¢N
   * POST /cart/checkout
   */
  static async processCheckout(req, res) {
    try {
      const sessionId = req.sessionID || req.session.id;
      const userId = req.session?.user?.id || null;
      
      const {
        customerName,
        customerEmail,
        customerPhone,
        shippingAddress,
        ward = '',
        district,
        city,
        paymentMethod = 'cod',
        notes = ''
      } = req.body;
      
      console.log('üí≥ Processing checkout:', {
        sessionId: sessionId ? `${sessionId.substring(0, 8)}...` : 'N/A',
        userId: userId,
        customerName,
        customerEmail,
        paymentMethod,
        timestamp: new Date().toISOString()
      });
      
      // Get current cart
      const cart = await Cart.findBySessionId(sessionId, userId);
      
      if (!cart || cart.items.length === 0) {
        return res.status(400).json({
          success: false,
          message: 'Gi·ªè h√†ng tr·ªëng ho·∫∑c kh√¥ng t√¨m th·∫•y'
        });
      }
      
      // Validate required fields
      const requiredFields = [
        { field: customerName, name: 'H·ªç t√™n' },
        { field: customerEmail, name: 'Email' },
        { field: customerPhone, name: 'S·ªë ƒëi·ªán tho·∫°i' },
        { field: shippingAddress, name: 'ƒê·ªãa ch·ªâ giao h√†ng' },
        { field: district, name: 'Qu·∫≠n/Huy·ªán' }
      ];
      
      const missingFields = requiredFields.filter(item => !item.field).map(item => item.name);
      
      if (missingFields.length > 0) {
        return res.status(400).json({
          success: false,
          message: `Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: ${missingFields.join(', ')}`
        });
      }
      
      // Validate email format
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(customerEmail)) {
        return res.status(400).json({
          success: false,
          message: 'Email kh√¥ng h·ª£p l·ªá'
        });
      }
      
      // Validate phone number (Vietnam format)
      const cleanPhone = customerPhone.replace(/\D/g, '');
      if (cleanPhone.length < 10 || cleanPhone.length > 11) {
        return res.status(400).json({
          success: false,
          message: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá'
        });
      }
      
      // ‚ú® GENERATE UNIQUE ORDER ID
      const timestamp = Date.now();
      const random = Math.random().toString(36).substr(2, 5).toUpperCase();
      const orderId = `SP-${new Date().toISOString().slice(0, 10).replace(/-/g, '')}-${timestamp.toString().slice(-6)}-${random}`;
      const deliveryDate = new Date(Date.now() + (3 * 24 * 60 * 60 * 1000));
      
      // ‚ú® CREATE COMPREHENSIVE ORDER DATA
      const orderData = {
        orderId: orderId,
        sessionId: sessionId,
        userId: userId, // ‚úÖ CRITICAL: Ensure userId is properly set
        status: paymentMethod === 'cod' ? 'pending' : 'awaiting_payment',
        paymentMethod: paymentMethod,
        paymentStatus: paymentMethod === 'cod' ? 'pending' : 'unpaid',
        customer: {
          name: customerName.trim(),
          email: customerEmail.toLowerCase().trim(),
          phone: cleanPhone
        },
        shipping: {
  address: shippingAddress.trim(),
  ward: ward?.trim() || 'Ch∆∞a c·∫≠p nh·∫≠t', // ‚úÖ FIX
  district: district.trim(),
  city: city || 'H√† N·ªôi'
},
        items: cart.items.map(item => ({
          productId: item.product._id || item.productId,
          productName: item.product.name || 'S·∫£n ph·∫©m',
          productImage: item.product.image || '/images/products/default.jpg',
          price: item.priceAtTime || item.price,
          quantity: item.quantity,
          color: item.color || 'M·∫∑c ƒë·ªãnh',
          size: item.size || 'M·∫∑c ƒë·ªãnh',
          subtotal: item.subtotal
        })),
        totalItems: cart.totalItems,
        totalPrice: cart.totalPrice,
        shippingFee: cart.shippingFee,
        finalTotal: cart.finalTotal,
        notes: notes.trim(),
        estimatedDelivery: deliveryDate,
        // ‚ú® ADD COMPREHENSIVE ORDER HISTORY
        orderHistory: [
          {
            status: 'pending',
            timestamp: new Date(),
            note: 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o v√† ƒëang ch·ªù x·ª≠ l√Ω',
            updatedBy: 'system'
          }
        ],
        // ‚ú® ADD METADATA FOR DEBUGGING
        metadata: {
          userAgent: req.get('User-Agent'),
          ip: req.ip,
          createdAt: new Date(),
          version: '1.0'
        }
      };
      
      console.log('üìã Creating order with enhanced data:', {
        orderId: orderData.orderId,
        sessionId: orderData.sessionId ? `${orderData.sessionId.substring(0, 8)}...` : 'N/A',
        userId: orderData.userId,
        customerName: orderData.customer.name,
        customerEmail: orderData.customer.email,
        totalItems: orderData.totalItems,
        finalTotal: orderData.finalTotal,
        paymentMethod: orderData.paymentMethod
      });
      
      // ‚ú® ENHANCED ORDER SAVING WITH MULTIPLE FALLBACK METHODS
      let savedOrder = null;
      let saveMethod = 'unknown';
      
      try {
        // Method 1: Try Order.createOrder() static method
        const Order = require('../models/Order');
        console.log('üîÑ Attempting Order.createOrder()...');
        
        savedOrder = await Order.createOrder(orderData);
        saveMethod = 'Order.createOrder()';
        
        if (!savedOrder) {
          throw new Error('Order.createOrder() returned null');
        }
        
        console.log('‚úÖ Order saved via Order.createOrder():', {
          orderId: savedOrder.orderId,
          mongoId: savedOrder._id,
          userId: savedOrder.userId,
          sessionId: savedOrder.sessionId ? `${savedOrder.sessionId.substring(0, 8)}...` : 'N/A'
        });
        
      } catch (createOrderError) {
        console.error('‚ùå Order.createOrder() failed:', createOrderError.message);
        
        // Method 2: Try direct instantiation and save
        try {
          console.log('üîÑ Attempting direct Order save...');
          const Order = require('../models/Order');
          
          savedOrder = new Order(orderData);
          await savedOrder.save();
          saveMethod = 'Direct Order save';
          
          console.log('‚úÖ Order saved via direct save:', {
            orderId: savedOrder.orderId,
            mongoId: savedOrder._id,
            userId: savedOrder.userId
          });
          
        } catch (directSaveError) {
          console.error('‚ùå Direct save failed:', directSaveError.message);
          
          // Method 3: Try mongoose create
          try {
            console.log('üîÑ Attempting mongoose.create()...');
            const Order = require('../models/Order');
            
            savedOrder = await Order.create(orderData);
            saveMethod = 'Mongoose.create()';
            
            console.log('‚úÖ Order saved via mongoose.create():', {
              orderId: savedOrder.orderId,
              mongoId: savedOrder._id
            });
            
          } catch (mongooseCreateError) {
            console.error('‚ùå Mongoose.create() failed:', mongooseCreateError.message);
            
            // Method 4: Session fallback
            console.log('‚ö†Ô∏è Using session fallback for order storage');
            
            if (!req.session.orders) {
              req.session.orders = [];
            }
            
            req.session.orders.push(orderData);
            savedOrder = { ...orderData, _id: 'session_' + timestamp };
            saveMethod = 'Session fallback';
            
            console.log('üìù Order saved to session as fallback');
          }
        }
      }
      
      // ‚ú® VERIFY ORDER WAS ACTUALLY SAVED AND CAN BE RETRIEVED
      if (savedOrder && savedOrder._id && !savedOrder._id.toString().startsWith('session_')) {
        try {
          console.log('üîç Verifying order in database...');
          const Order = require('../models/Order');
          
          // Try multiple ways to find the order
          const verificationMethods = [
            () => Order.findById(savedOrder._id),
            () => Order.findOne({ orderId: savedOrder.orderId }),
            () => Order.findOne({ sessionId: sessionId, userId: userId })
          ];
          
          let verifiedOrder = null;
          for (const method of verificationMethods) {
            try {
              verifiedOrder = await method();
              if (verifiedOrder) break;
            } catch (err) {
              console.log('üîç Verification method failed:', err.message);
            }
          }
          
          if (verifiedOrder) {
            console.log('‚úÖ Order verification successful:', {
              orderId: verifiedOrder.orderId,
              mongoId: verifiedOrder._id,
              userId: verifiedOrder.userId,
              sessionId: verifiedOrder.sessionId ? `${verifiedOrder.sessionId.substring(0, 8)}...` : 'N/A',
              status: verifiedOrder.status
            });
          } else {
            console.error('‚ùå Order verification failed - not found in database');
            
            // Force session fallback if verification fails
            if (!req.session.orders) {
              req.session.orders = [];
            }
            req.session.orders.push(orderData);
          }
          
        } catch (verifyError) {
          console.error('‚ùå Order verification error:', verifyError.message);
        }
      }
      
      // ‚ú® CLEAR CART AFTER SUCCESSFUL ORDER
      try {
        console.log('üßπ Clearing cart after successful order...');
        cart.clear();
        await cart.save();
        
        // Clear session cart for sample products
        if (req.session.cartItems) {
          req.session.cartItems = [];
          req.session.cartCount = 0;
        }
        
        console.log('‚úÖ Cart cleared successfully');
      } catch (clearError) {
        console.error('‚ö†Ô∏è Error clearing cart:', clearError.message);
        // Don't fail the checkout if cart clearing fails
      }
      
      // ‚ú® STORE ORDER INFO IN SESSION FOR SUCCESS PAGE AND DEBUGGING
      req.session.lastOrder = {
        orderId: savedOrder.orderId,
        total: (savedOrder.finalTotal || orderData.finalTotal).toLocaleString('vi-VN') + 'ƒë',
        paymentMethod: savedOrder.paymentMethod || orderData.paymentMethod,
        deliveryDate: (savedOrder.estimatedDelivery || orderData.estimatedDelivery).toLocaleDateString('vi-VN'),
        customerName: savedOrder.customer?.name || orderData.customer.name,
        status: savedOrder.status || orderData.status,
        saveMethod: saveMethod
      };
      
      // ‚ú® ENHANCED SUCCESS RESPONSE WITH DEBUGGING INFO
      console.log('üéâ Checkout completed successfully:', {
        orderId: savedOrder.orderId || orderData.orderId,
        userId: userId,
        sessionId: sessionId ? `${sessionId.substring(0, 8)}...` : 'N/A',
        saveMethod: saveMethod,
        customerEmail: orderData.customer.email,
        total: orderData.finalTotal,
        timestamp: new Date().toISOString()
      });
      
      // ‚ú® SUCCESS RESPONSE WITH COMPREHENSIVE DATA
      const responseData = {
        success: true,
        message: 'ƒê·∫∑t h√†ng th√†nh c√¥ng! Chuy·ªÉn ƒë·∫øn trang ƒë∆°n h√†ng c·ªßa b·∫°n...',
        data: {
          orderId: savedOrder.orderId || orderData.orderId,
          estimatedDelivery: (savedOrder.estimatedDelivery || orderData.estimatedDelivery).toLocaleDateString('vi-VN'),
          total: (savedOrder.finalTotal || orderData.finalTotal).toLocaleString('vi-VN') + 'ƒë',
          paymentMethod: savedOrder.paymentMethod || orderData.paymentMethod,
          status: savedOrder.status || orderData.status,
          customerName: savedOrder.customer?.name || orderData.customer.name,
          totalItems: savedOrder.totalItems || orderData.totalItems
        },
        // ‚ú® SMART REDIRECT LOGIC
        redirect: userId ? '/user/orders' : '/auth/login?redirect=/user/orders',
        // ‚ú® DEBUG INFO (remove in production)
        debug: process.env.NODE_ENV === 'development' ? {
          saveMethod: saveMethod,
          userId: userId,
          sessionId: sessionId ? `${sessionId.substring(0, 8)}...` : 'N/A',
          hasMongoId: !!(savedOrder._id && !savedOrder._id.toString().startsWith('session_'))
        } : undefined
      };
      
      res.json(responseData);
      
    } catch (error) {
      console.error('‚ùå Checkout error:', error);
      
      // ‚ú® ENHANCED ERROR LOGGING
      console.error('üí• Checkout process failed:', {
        error: error.message,
        stack: error.stack,
        userId: req.session?.user?.id,
        sessionId: req.sessionID ? `${req.sessionID.substring(0, 8)}...` : 'N/A',
        timestamp: new Date().toISOString()
      });
      
      res.status(500).json({
        success: false,
        message: 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i.',
        error: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  }

  /**
   * Merge guest cart khi user ƒëƒÉng nh·∫≠p
   */
  static async mergeGuestCart(req) {
    try {
      const guestSessionId = req.sessionID;
      const userId = req.session.user.id;
      
      console.log('üîÑ Merging guest cart:', { guestSessionId, userId });
      
      // T√¨m guest cart
      const guestCart = await Cart.findOne({ sessionId: guestSessionId, userId: null });
      
      if (guestCart && !guestCart.isEmpty()) {
        // T·∫°o session ID m·ªõi cho user
        const userSessionId = 'user_' + userId + '_' + Date.now();
        
        // T·∫°o ho·∫∑c l·∫•y user cart
        const userCart = await Cart.findBySessionId(userSessionId, userId);
        
        // Merge items t·ª´ guest cart v√†o user cart
        for (const guestItem of guestCart.items) {
          await userCart.addItem(
            guestItem.product,
            guestItem.quantity,
            guestItem.color,
            guestItem.size
          );
        }
        
        // X√≥a guest cart
        await guestCart.deleteOne();
        
        console.log('‚úÖ Guest cart merged successfully');
        return userCart;
      }
      
      return null;
      
    } catch (error) {
      console.error('‚ùå Error merging guest cart:', error);
      return null;
    }
  }

  /**
   * API: L·∫•y s·ªë l∆∞·ª£ng items trong cart
   * GET /cart/count
   */
  static async getCartCount(req, res) {
    try {
      const sessionId = req.sessionID || req.session.id;
      const userId = req.session?.user?.id || null;
      
      // Get cart from database
      const cart = await Cart.findBySessionId(sessionId, userId);
      
      // Add session cart count for sample products
      let sessionCartCount = 0;
      if (req.session.cartItems && req.session.cartItems.length > 0) {
        sessionCartCount = req.session.cartItems.reduce((sum, item) => sum + item.quantity, 0);
      }
      
      const totalCount = cart.totalItems + sessionCartCount;
      
      res.json({
        success: true,
        count: totalCount
      });
      
    } catch (error) {
      console.error('‚ùå Cart Controller GetCartCount Error:', error);
      res.status(500).json({
        success: false,
        message: 'L·ªói khi l·∫•y s·ªë l∆∞·ª£ng gi·ªè h√†ng',
        count: 0
      });
    }
  }

  /**
   * ‚ú® NEW: Debug endpoint to check orders (development only)
   * GET /cart/debug/orders
   */
  static async debugOrders(req, res) {
    try {
      // Only in development
      if (process.env.NODE_ENV === 'production') {
        return res.status(404).json({ success: false, message: 'Not found' });
      }
      
      const sessionId = req.sessionID || req.session.id;
      const userId = req.session?.user?.id || null;
      
      console.log('üîç Debug orders check:', { sessionId, userId });
      
      const Order = require('../models/Order');
      
      // Get all orders in database
      const allOrders = await Order.find({}).limit(10).sort({ createdAt: -1 });
      
      // Get orders for current user/session
      const userOrders = await Order.find({
        $or: [
          { userId: userId },
          { sessionId: sessionId },
          { 'customer.email': req.session?.user?.email }
        ]
      }).sort({ createdAt: -1 });
      
      // Get session orders
      const sessionOrders = req.session.orders || [];
      
      res.json({
        success: true,
        debug: {
          sessionId: sessionId ? `${sessionId.substring(0, 8)}...` : 'N/A',
          userId: userId,
          userEmail: req.session?.user?.email,
          totalOrdersInDB: allOrders.length,
          userOrdersInDB: userOrders.length,
          sessionOrdersCount: sessionOrders.length,
          lastOrder: req.session.lastOrder || null,
          allOrders: allOrders.map(o => ({
            orderId: o.orderId,
            userId: o.userId,
            sessionId: o.sessionId ? `${o.sessionId.substring(0, 8)}...` : 'N/A',
            customerEmail: o.customer.email,
            status: o.status,
            total: o.finalTotal,
            createdAt: o.createdAt
          })),
          userOrders: userOrders.map(o => ({
            orderId: o.orderId,
            status: o.status,
            total: o.finalTotal,
            createdAt: o.createdAt
          }))
        }
      });
      
    } catch (error) {
      console.error('‚ùå Debug Orders Error:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }
}

module.exports = CartController;