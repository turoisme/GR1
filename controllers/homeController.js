/**
 * Home Controller - Complete Version with User Authentication and Product Color/Size Support
 * X·ª≠ l√Ω c√°c trang ch√≠nh c·ªßa website
 */

const Product = require('../models/Product');

class HomeController {
  /**
   * Trang ch·ªß
   * GET /
   */
  static async index(req, res) {
    try {
      console.log('HomeController.index called - MongoDB version');
      console.log('User session:', req.session?.user);
      
      // L·∫•y s·∫£n ph·∫©m n·ªïi b·∫≠t t·ª´ MongoDB
      let featuredProducts = [];
      
      try {
        featuredProducts = await Product.getFeaturedProducts(6);
        console.log(`üì¶ Found ${featuredProducts.length} featured products from DB`);
        
        // ƒê·∫£m b·∫£o s·∫£n ph·∫©m t·ª´ DB c√≥ colors v√† sizes
        if (featuredProducts.length > 0) {
          featuredProducts = featuredProducts.map(product => {
            const productObj = product.toObject ? product.toObject() : product;
            return {
              ...productObj,
              colors: productObj.colors && productObj.colors.length > 0 ? 
                productObj.colors : ['ƒêen', 'Tr·∫Øng', 'Xanh d∆∞∆°ng', 'ƒê·ªè', 'Xanh l√°', 'V√†ng'],
              sizes: productObj.sizes && productObj.sizes.length > 0 ? 
                productObj.sizes : ['S', 'M', 'L', 'XL', 'XXL']
            };
          });
        }
      } catch (dbError) {
        console.log('‚ö†Ô∏è Using sample products due to DB error:', dbError.message);
        featuredProducts = [];
      }
      
      // N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m t·ª´ DB, s·ª≠ d·ª•ng sample data
      if (!featuredProducts || featuredProducts.length === 0) {
        featuredProducts = [
          {
            _id: 'sample1',
            name: 'Gi√†y ch·∫°y b·ªô Nike Air Max',
            price: 2500000,
            image: 'üëü',
            brand: 'Nike',
            category: 'shoes',
            colors: ['ƒêen', 'Tr·∫Øng', 'Xanh d∆∞∆°ng'],
            sizes: ['39', '40', '41', '42', '43'],
            inStock: true,
            featured: true,
            description: 'Gi√†y ch·∫°y b·ªô cao c·∫•p v·ªõi c√¥ng ngh·ªá Air cushioning, thi·∫øt k·∫ø nh·∫π v√† tho√°ng kh√≠.',
            getFormattedPrice: function() { return this.price.toLocaleString('vi-VN') + 'ƒë'; }
          },
          {
            _id: 'sample2',
            name: '√Åo th·ªÉ thao Adidas ClimaTech',
            price: 850000,
            image: 'üëï',
            brand: 'Adidas',
            category: 'tops',
            colors: ['ƒê·ªè', 'Xanh l√°', 'Tr·∫Øng', 'ƒêen'],
            sizes: ['S', 'M', 'L', 'XL', 'XXL'],
            inStock: true,
            featured: true,
            description: '√Åo th·ªÉ thao tho√°ng m√°t v·ªõi c√¥ng ngh·ªá ClimaTech, th·∫•m h√∫t m·ªì h√¥i t·ªët.',
            getFormattedPrice: function() { return this.price.toLocaleString('vi-VN') + 'ƒë'; }
          },
          {
            _id: 'sample3',
            name: 'Qu·∫ßn short Nike Dri-FIT',
            price: 650000,
            image: 'ü©≥',
            brand: 'Nike',
            category: 'bottoms',
            colors: ['ƒêen', 'Xanh d∆∞∆°ng', 'X√°m'],
            sizes: ['S', 'M', 'L', 'XL'],
            inStock: true,
            featured: true,
            description: 'Qu·∫ßn short th·ªÉ thao tho·∫£i m√°i v·ªõi c√¥ng ngh·ªá Dri-FIT, co gi√£n t·ªët.',
            getFormattedPrice: function() { return this.price.toLocaleString('vi-VN') + 'ƒë'; }
          },
          {
            _id: 'sample4',
            name: '√Åo hoodie Under Armour',
            price: 1200000,
            image: 'üß•',
            brand: 'Under Armour',
            category: 'tops',
            colors: ['ƒêen', 'X√°m', 'Tr·∫Øng', 'ƒê·ªè'],
            sizes: ['S', 'M', 'L', 'XL', 'XXL'],
            inStock: true,
            featured: true,
            description: '√Åo hoodie th·ªÉ thao cao c·∫•p, gi·ªØ ·∫•m t·ªët v√† tho√°ng kh√≠.',
            getFormattedPrice: function() { return this.price.toLocaleString('vi-VN') + 'ƒë'; }
          },
          {
            _id: 'sample5',
            name: 'Gi√†y tennis Puma Court',
            price: 1800000,
            image: 'üéæ',
            brand: 'Puma',
            category: 'shoes',
            colors: ['Tr·∫Øng', 'ƒêen', 'Xanh l√°'],
            sizes: ['38', '39', '40', '41', '42', '43', '44'],
            inStock: true,
            featured: true,
            description: 'Gi√†y tennis chuy√™n nghi·ªáp v·ªõi ƒë·∫ø ch·ªëng tr∆∞·ª£t v√† thi·∫øt k·∫ø tho√°ng kh√≠.',
            getFormattedPrice: function() { return this.price.toLocaleString('vi-VN') + 'ƒë'; }
          },
          {
            _id: 'sample6',
            name: 'Qu·∫ßn legging Adidas',
            price: 750000,
            image: 'üëñ',
            brand: 'Adidas',
            category: 'bottoms',
            colors: ['ƒêen', 'X√°m', 'Xanh d∆∞∆°ng'],
            sizes: ['XS', 'S', 'M', 'L', 'XL'],
            inStock: true,
            featured: true,
            description: 'Qu·∫ßn legging th·ªÉ thao co gi√£n 4 chi·ªÅu, ph√π h·ª£p cho m·ªçi ho·∫°t ƒë·ªông.',
            getFormattedPrice: function() { return this.price.toLocaleString('vi-VN') + 'ƒë'; }
          }
        ];
        
        console.log(`üì¶ Using ${featuredProducts.length} sample products`);
      }
      
      // L·∫•y danh m·ª•c s·∫£n ph·∫©m
      const categories = Product.getCategories();
      
      // L·∫•y th∆∞∆°ng hi·ªáu
      const brands = Product.getBrands();
      
      res.render('home/index', {
        title: 'SportShop - Th·ªùi trang th·ªÉ thao ch·∫•t l∆∞·ª£ng cao',
        metaDescription: 'Kh√°m ph√° b·ªô s∆∞u t·∫≠p qu·∫ßn √°o th·ªÉ thao hi·ªán ƒë·∫°i, ch·∫•t l∆∞·ª£ng cao t·ª´ c√°c th∆∞∆°ng hi·ªáu n·ªïi ti·∫øng nh∆∞ Nike, Adidas, Under Armour.',
        featuredProducts: featuredProducts,
        categories: categories,
        brands: brands,
        currentPage: 'home',
        showHero: true,
        // User data t·ª´ middleware
        user: req.session?.user || null,
        // Flash messages
        success: req.flash('success'),
        error: req.flash('error')
      });
      
    } catch (error) {
      console.error('Home Controller Index Error:', error);
      
      // Fallback cu·ªëi c√πng v·ªõi basic sample data
      const basicSampleProducts = [
        {
          _id: 'fallback1',
          name: 'S·∫£n ph·∫©m th·ªÉ thao',
          price: 500000,
          image: 'üèÉ‚Äç‚ôÇÔ∏è',
          brand: 'SportShop',
          category: 'general',
          colors: ['ƒêen', 'Tr·∫Øng'],
          sizes: ['M', 'L'],
          inStock: true,
          featured: true,
          description: 'S·∫£n ph·∫©m th·ªÉ thao ch·∫•t l∆∞·ª£ng cao.',
          getFormattedPrice: function() { return this.price.toLocaleString('vi-VN') + 'ƒë'; }
        }
      ];
      
      res.render('home/index', {
        title: 'SportShop - Th·ªùi trang th·ªÉ thao ch·∫•t l∆∞·ª£ng cao',
        featuredProducts: basicSampleProducts,
        categories: [{ id: 'general', name: 'Th·ªÉ thao', icon: 'üèÉ‚Äç‚ôÇÔ∏è' }],
        brands: [{ id: 'sportshop', name: 'SportShop' }],
        currentPage: 'home',
        showHero: true,
        user: req.session?.user || null,
        success: req.flash('success'),
        error: req.flash('error')
      });
    }
  }

  /**
   * Trang gi·ªõi thi·ªáu
   * GET /about
   */
  static async about(req, res) {
    try {
      res.render('pages/about', {
        title: 'Gi·ªõi thi·ªáu - SportShop',
        currentPage: 'about',
        user: req.session?.user || null,
        success: req.flash('success'),
        error: req.flash('error')
      });
    } catch (error) {
      console.error('Home Controller About Error:', error);
      res.status(500).render('error', {
        title: 'L·ªói - SportShop',
        error: 'Kh√¥ng th·ªÉ t·∫£i trang gi·ªõi thi·ªáu',
        currentPage: 'error',
        user: req.session?.user || null
      });
    }
  }

  /**
   * Trang li√™n h·ªá
   * GET /contact
   */
  static async contact(req, res) {
    try {
      res.render('pages/contact', {
        title: 'Li√™n h·ªá - SportShop',
        currentPage: 'contact',
        user: req.session?.user || null,
        success: req.flash('success'),
        error: req.flash('error')
      });
    } catch (error) {
      console.error('Home Controller Contact Error:', error);
      res.status(500).render('error', {
        title: 'L·ªói - SportShop',
        error: 'Kh√¥ng th·ªÉ t·∫£i trang li√™n h·ªá',
        currentPage: 'error',
        user: req.session?.user || null
      });
    }
  }

  /**
   * X·ª≠ l√Ω form li√™n h·ªá
   * POST /contact
   */
  static async submitContact(req, res) {
    try {
      const { name, email, phone, subject, message } = req.body;
      
      console.log('üìß Contact form submission attempt:', {
        name, email, phone, subject, messageLength: message?.length
      });
      
      // Validation
      if (!name || !email || !message) {
        return res.status(400).json({
          success: false,
          message: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc (H·ªç t√™n, Email, N·ªôi dung)'
        });
      }
      
      // Validate name length
      if (name.trim().length < 2) {
        return res.status(400).json({
          success: false,
          message: 'H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±'
        });
      }
      
      // Validate email format
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        return res.status(400).json({
          success: false,
          message: 'ƒê·ªãnh d·∫°ng email kh√¥ng h·ª£p l·ªá'
        });
      }
      
      // Validate phone if provided
      if (phone && phone.trim()) {
        const phoneRegex = /^[0-9]{10,11}$/;
        const cleanPhone = phone.replace(/[\s\-\(\)]/g, '');
        if (!phoneRegex.test(cleanPhone)) {
          return res.status(400).json({
            success: false,
            message: 'S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10-11 ch·ªØ s·ªë'
          });
        }
      }
      
      // Validate message length
      if (message.trim().length < 10) {
        return res.status(400).json({
          success: false,
          message: 'N·ªôi dung tin nh·∫Øn ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±'
        });
      }
      
      // TODO: L∆∞u v√†o database ho·∫∑c g·ª≠i email
      // For now, just log the contact submission
      console.log('üìß Contact form submission:', {
        name: name.trim(),
        email: email.toLowerCase().trim(),
        phone: phone?.trim() || 'Kh√¥ng cung c·∫•p',
        subject: subject?.trim() || 'Kh√¥ng c√≥ ch·ªß ƒë·ªÅ',
        message: message.trim(),
        timestamp: new Date(),
        userAgent: req.get('User-Agent'),
        ip: req.ip,
        userId: req.session?.user?.id || 'Guest'
      });
      
      // Simulate processing time
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Success response
      res.json({
        success: true,
        message: 'C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong v√≤ng 24 gi·ªù.'
      });
      
    } catch (error) {
      console.error('Home Controller SubmitContact Error:', error);
      res.status(500).json({
        success: false,
        message: 'C√≥ l·ªói x·∫£y ra khi g·ª≠i th√¥ng tin li√™n h·ªá. Vui l√≤ng th·ª≠ l·∫°i sau.'
      });
    }
  }

  /**
   * Trang t√¨m ki·∫øm
   * GET /search
   */
  static async search(req, res) {
    try {
      const { q = '', category = 'all', brand = 'all', page = 1 } = req.query;
      const query = q.trim();
      const currentPage = parseInt(page) || 1;
      const limit = 12;
      const skip = (currentPage - 1) * limit;
      
      let products = [];
      let totalProducts = 0;
      let searchPerformed = false;
      
      if (query.length >= 2) {
        searchPerformed = true;
        
        try {
          // T√¨m ki·∫øm s·∫£n ph·∫©m t·ª´ database
          let searchResults = await Product.searchProducts(query);
          
          // L·ªçc theo category v√† brand n·∫øu c√≥
          let filteredResults = searchResults.filter(product => {
            if (category && category !== 'all' && product.category !== category) return false;
            if (brand && brand !== 'all' && product.brand !== brand) return false;
            return true;
          });
          
          totalProducts = filteredResults.length;
          products = filteredResults.slice(skip, skip + limit);
          
        } catch (searchError) {
          console.log('Search error, using sample results:', searchError.message);
          
          // Fallback v·ªõi sample products n·∫øu DB l·ªói
          const sampleResults = [
            {
              _id: 'search1',
              name: `K·∫øt qu·∫£ t√¨m ki·∫øm: ${query}`,
              price: 999000,
              image: 'üîç',
              brand: 'SportShop',
              category: 'search',
              colors: ['ƒêen', 'Tr·∫Øng'],
              sizes: ['M', 'L'],
              getFormattedPrice: function() { return this.price.toLocaleString('vi-VN') + 'ƒë'; }
            }
          ];
          
          products = sampleResults;
          totalProducts = sampleResults.length;
        }
      }
      
      // Pagination
      const totalPages = Math.ceil(totalProducts / limit);
      const pagination = {
        currentPage: currentPage,
        totalPages: totalPages,
        totalProducts: totalProducts,
        hasNext: currentPage < totalPages,
        hasPrev: currentPage > 1,
        nextPage: currentPage + 1,
        prevPage: currentPage - 1
      };
      
      const categories = Product.getCategories();
      const brands = Product.getBrands();
      
      res.render('pages/search', {
        title: query ? `T√¨m ki·∫øm: "${query}" - SportShop` : 'T√¨m ki·∫øm - SportShop',
        query: query,
        products: products,
        searchPerformed: searchPerformed,
        resultCount: totalProducts,
        categories: categories,
        brands: brands,
        selectedCategory: category,
        selectedBrand: brand,
        pagination: pagination,
        currentPage: 'search',
        user: req.session?.user || null,
        success: req.flash('success'),
        error: req.flash('error')
      });
      
    } catch (error) {
      console.error('Home Controller Search Error:', error);
      res.status(500).render('error', {
        title: 'L·ªói t√¨m ki·∫øm - SportShop',
        error: 'Kh√¥ng th·ªÉ th·ª±c hi·ªán t√¨m ki·∫øm',
        currentPage: 'error',
        user: req.session?.user || null
      });
    }
  }

  /**
   * API: G·ª£i √Ω t√¨m ki·∫øm
   * GET /search/suggestions
   */
  static async searchSuggestions(req, res) {
    try {
      const { q } = req.query;
      
      if (!q || q.length < 2) {
        return res.json({
          success: true,
          suggestions: []
        });
      }
      
      let suggestions = [];
      
      try {
        // T√¨m s·∫£n ph·∫©m c√≥ t√™n ch·ª©a t·ª´ kh√≥a
        const products = await Product.find({
          $or: [
            { name: { $regex: q, $options: 'i' } },
            { brand: { $regex: q, $options: 'i' } },
            { category: { $regex: q, $options: 'i' } }
          ],
          inStock: true
        })
        .limit(8)
        .select('name category brand')
        .lean();
        
        suggestions = products.map(product => ({
          name: product.name,
          category: product.category,
          brand: product.brand,
          type: 'product'
        }));
        
        // Th√™m g·ª£i √Ω theo th∆∞∆°ng hi·ªáu v√† danh m·ª•c
        const brands = Product.getBrands().filter(brand => 
          brand.name.toLowerCase().includes(q.toLowerCase())
        ).slice(0, 3);
        
        const categories = Product.getCategories().filter(cat => 
          cat.name.toLowerCase().includes(q.toLowerCase())
        ).slice(0, 3);
        
        brands.forEach(brand => {
          suggestions.push({
            name: brand.name,
            type: 'brand'
          });
        });
        
        categories.forEach(cat => {
          suggestions.push({
            name: cat.name,
            type: 'category'
          });
        });
        
      } catch (dbError) {
        console.log('Search suggestions DB error:', dbError.message);
        // Return sample suggestions on DB error
        suggestions = [
          { name: `T√¨m ki·∫øm "${q}"`, type: 'search' }
        ];
      }
      
      res.json({
        success: true,
        suggestions: suggestions.slice(0, 10) // Gi·ªõi h·∫°n 10 suggestions
      });
      
    } catch (error) {
      console.error('Home Controller SearchSuggestions Error:', error);
      res.status(500).json({
        success: false,
        message: 'L·ªói khi l·∫•y g·ª£i √Ω t√¨m ki·∫øm'
      });
    }
  }

  /**
   * API endpoint th·ªëng k√™ trang ch·ªß
   * GET /api/stats
   */
  static async getStats(req, res) {
    try {
      let stats = {
        totalProducts: 0,
        featuredProducts: 0,
        totalCategories: 0,
        totalBrands: 0,
        categories: [],
        brands: []
      };
      
      try {
        const totalProducts = await Product.countDocuments({ inStock: true });
        const featuredProducts = await Product.countDocuments({ featured: true, inStock: true });
        const categories = await Product.distinct('category', { inStock: true });
        const brands = await Product.distinct('brand', { inStock: true });
        
        stats = {
          totalProducts: totalProducts,
          featuredProducts: featuredProducts,
          totalCategories: categories.length,
          totalBrands: brands.length,
          categories: categories,
          brands: brands,
          lastUpdated: new Date()
        };
        
        console.log('üìä Stats retrieved from DB:', stats);
        
      } catch (dbError) {
        console.log('Stats DB error, using defaults:', dbError.message);
        // Use default stats on DB error
        stats = {
          totalProducts: 6,
          featuredProducts: 6,
          totalCategories: 4,
          totalBrands: 4,
          categories: ['shoes', 'tops', 'bottoms', 'accessories'],
          brands: ['Nike', 'Adidas', 'Under Armour', 'Puma'],
          lastUpdated: new Date(),
          note: 'Using sample data due to database connection issue'
        };
      }
      
      res.json({
        success: true,
        data: stats
      });
      
    } catch (error) {
      console.error('Home Controller GetStats Error:', error);
      res.status(500).json({
        success: false,
        message: 'L·ªói khi l·∫•y th·ªëng k√™',
        error: error.message
      });
    }
  }
}

module.exports = HomeController;