<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quản lý sản phẩm - SportShop Admin</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f8fafc;
            color: #333;
            line-height: 1.6;
        }

        /* Sidebar */
        .sidebar {
            position: fixed;
            left: 0;
            top: 0;
            width: 260px;
            height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            overflow-y: auto;
            z-index: 1000;
            transition: all 0.3s ease;
        }

        .sidebar-header {
            padding: 20px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .sidebar-header h2 {
            font-size: 1.4rem;
            font-weight: 600;
        }

        .sidebar-menu {
            padding: 20px 0;
        }

        .menu-item {
            margin-bottom: 5px;
        }

        .menu-item a {
            display: flex;
            align-items: center;
            padding: 12px 20px;
            color: rgba(255,255,255,0.8);
            text-decoration: none;
            transition: all 0.3s ease;
            position: relative;
        }

        .menu-item a:hover {
            background: rgba(255,255,255,0.1);
            color: white;
            transform: translateX(5px);
        }

        .menu-item a.active {
            background: rgba(255,255,255,0.2);
            color: white;
        }

        .menu-item a.active::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 4px;
            background: white;
        }

        .menu-item i {
            width: 20px;
            margin-right: 15px;
            text-align: center;
            font-size: 1.1rem;
        }

        /* Main Content */
        .main-content {
            margin-left: 260px;
            min-height: 100vh;
        }

        /* Header */
        .header {
            background: white;
            padding: 15px 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-left h1 {
            font-size: 1.8rem;
            color: #333;
            font-weight: 600;
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .user-avatar {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea, #764ba2);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
        }

        /* Content */
        .content {
            padding: 30px;
        }

        /* Action Buttons */
        .action-buttons {
            display: flex;
            gap: 15px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .btn-warning {
            background: #ffc107;
            color: #212529;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-sm {
            padding: 8px 15px;
            font-size: 0.9rem;
        }

        /* ✅ Loading state for buttons */
        .btn.loading {
            opacity: 0.7;
            pointer-events: none;
            position: relative;
        }

        .btn.loading::after {
            content: '';
            position: absolute;
            width: 16px;
            height: 16px;
            border: 2px solid transparent;
            border-top: 2px solid currentColor;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-left: 8px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Filters */
        .filters {
            background: white;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            margin-bottom: 25px;
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            align-items: center;
        }

        .filter-group {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .filter-group label {
            font-weight: 500;
            color: #333;
        }

        .filter-group select,
        .filter-group input {
            padding: 8px 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            transition: border-color 0.3s ease;
        }

        .filter-group select:focus,
        .filter-group input:focus {
            outline: none;
            border-color: #667eea;
        }

        /* Products Table */
        .products-table {
            background: white;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            overflow: hidden;
        }

        .table-header {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .table-header h3 {
            font-size: 1.3rem;
            font-weight: 600;
        }

        .table-controls {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .search-box {
            position: relative;
        }

        .search-box input {
            padding: 8px 35px 8px 12px;
            border: 2px solid rgba(255,255,255,0.3);
            border-radius: 8px;
            background: rgba(255,255,255,0.1);
            color: white;
            width: 250px;
        }

        .search-box input::placeholder {
            color: rgba(255,255,255,0.7);
        }

        .search-box i {
            position: absolute;
            right: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: rgba(255,255,255,0.7);
        }

        .table-container {
            overflow-x: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #f1f5f9;
        }

        th {
            background: #f8fafc;
            font-weight: 600;
            color: #333;
        }

        .product-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .product-image {
            width: 50px;
            height: 50px;
            border-radius: 8px;
            object-fit: cover;
            background: #f1f5f9;
        }

        .product-emoji {
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(45deg, #667eea, #764ba2);
            border-radius: 8px;
            font-size: 1.5rem;
            color: white;
        }

        .product-details h4 {
            font-weight: 600;
            color: #333;
            margin-bottom: 3px;
        }

        .product-details p {
            color: #666;
            font-size: 0.9rem;
        }

        .status-badge {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
            margin-right: 5px;
        }

        .status-active {
            background: #d4edda;
            color: #155724;
        }

        .status-inactive {
            background: #f8d7da;
            color: #721c24;
        }

        .status-featured {
            background: #fff3cd;
            color: #856404;
        }

        .action-buttons-cell {
            display: flex;
            gap: 8px;
        }

        /* Pagination */
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
            margin-top: 25px;
        }

        .pagination-btn {
            padding: 8px 15px;
            border: 2px solid #e0e0e0;
            background: white;
            color: #666;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .pagination-btn:hover {
            border-color: #667eea;
            color: #667eea;
        }

        .pagination-btn.active {
            background: #667eea;
            color: white;
            border-color: #667eea;
        }

        .pagination-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.6);
            z-index: 2000;
        }

        .modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: white;
            padding: 30px;
            border-radius: 15px;
            width: 90%;
            max-width: 700px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f1f5f9;
        }

        .modal-header h3 {
            font-size: 1.5rem;
            font-weight: 600;
            color: #333;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #666;
            padding: 5px;
            border-radius: 5px;
            transition: background 0.3s ease;
        }

        .close-btn:hover {
            background: #f1f5f9;
        }

        /* Form */
        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            font-weight: 600;
            margin-bottom: 8px;
            color: #333;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e0e0e0;
            border-radius: 10px;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #667eea;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }

        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 10px;
        }

        .form-actions {
            display: flex;
            gap: 15px;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 2px solid #f1f5f9;
        }

        /* ✅ UPLOAD STYLES - Added for image upload */
        .image-upload-section {
            border: 2px dashed #ddd;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 15px;
            background: #fafafa;
            transition: all 0.3s ease;
            position: relative;
        }

        .image-upload-section.dragover {
            border-color: #667eea;
            background: #f0f8ff;
            transform: scale(1.02);
        }

        .upload-area {
            text-align: center;
            padding: 20px;
            cursor: pointer;
        }

        .upload-icon {
            font-size: 48px;
            color: #ccc;
            margin-bottom: 15px;
            transition: color 0.3s ease;
        }

        .upload-area:hover .upload-icon {
            color: #667eea;
        }

        .upload-text {
            color: #666;
            margin-bottom: 10px;
        }

        .upload-text strong {
            color: #667eea;
        }

        .upload-hint {
            font-size: 0.9rem;
            color: #999;
        }

        .file-input-hidden {
            display: none;
        }

        .image-preview-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .image-preview {
            position: relative;
            border: 2px solid #e0e0e0;
            border-radius: 12px;
            overflow: hidden;
            background: white;
            transition: all 0.3s ease;
        }

        .image-preview:hover {
            border-color: #667eea;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.2);
        }

        .preview-image {
            width: 100%;
            height: 120px;
            object-fit: cover;
            display: block;
        }

        .preview-actions {
            position: absolute;
            top: 5px;
            right: 5px;
            display: flex;
            gap: 5px;
        }

        .preview-btn {
            width: 28px;
            height: 28px;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            transition: all 0.3s ease;
        }

        .preview-btn-delete {
            background: rgba(220, 53, 69, 0.9);
            color: white;
        }

        .preview-btn-delete:hover {
            background: #dc3545;
            transform: scale(1.1);
        }

        .preview-btn-primary {
            background: rgba(102, 126, 234, 0.9);
            color: white;
        }

        .preview-btn-primary:hover {
            background: #667eea;
            transform: scale(1.1);
        }

        .image-info {
            padding: 8px;
            font-size: 0.8rem;
            color: #666;
            text-align: center;
            border-top: 1px solid #f0f0f0;
        }

        .upload-progress {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: #f0f0f0;
            border-radius: 0 0 12px 12px;
            overflow: hidden;
        }

        .progress-bar {
            height: 100%;
            background: linear-gradient(90deg, #667eea, #764ba2);
            transition: width 0.3s ease;
            width: 0%;
        }

        .upload-error {
            color: #dc3545;
            font-size: 0.85rem;
            margin-top: 5px;
            text-align: center;
        }

        .url-input-section {
            border-top: 1px solid #e0e0e0;
            padding-top: 15px;
            margin-top: 15px;
        }

        .url-input-section label {
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 8px;
        }

        .uploaded-images-list {
            display: none;
            margin-top: 15px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .uploaded-images-list.show {
            display: block;
        }

        .uploaded-image-item {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 8px;
            margin-bottom: 8px;
            background: white;
            border-radius: 6px;
            border: 1px solid #e0e0e0;
        }

        .uploaded-image-thumbnail {
            width: 40px;
            height: 40px;
            object-fit: cover;
            border-radius: 4px;
        }

        .uploaded-image-url {
            flex: 1;
            font-size: 0.9rem;
            color: #666;
            word-break: break-all;
        }

        /* ✅ Debug info */
        .debug-info {
            background: rgba(255, 193, 7, 0.1);
            border: 1px solid #ffc107;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            font-family: 'Courier New', monospace;
            font-size: 12px;
        }

        /* ✅ No data message */
        .no-data-message {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }

        .no-data-message i {
            font-size: 4rem;
            color: #ddd;
            margin-bottom: 20px;
        }

        .no-data-message h3 {
            margin-bottom: 10px;
            color: #333;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
            }

            .main-content {
                margin-left: 0;
            }

            .header {
                padding: 15px 20px;
            }

            .content {
                padding: 20px;
            }

            .filters {
                flex-direction: column;
                align-items: stretch;
            }

            .action-buttons {
                flex-direction: column;
            }

            .form-row {
                grid-template-columns: 1fr;
            }

            .table-container {
                font-size: 0.9rem;
            }

            .search-box input {
                width: 200px;
            }

            .image-preview-container {
                grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            }

            .modal-content {
                width: 95%;
                margin: 10px;
            }
        }

        /* Notification */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 10px;
            color: white;
            font-weight: 500;
            z-index: 3000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.success {
            background: #28a745;
        }

        .notification.error {
            background: #dc3545;
        }

        .notification.warning {
            background: #ffc107;
            color: #212529;
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="sidebar-header">
            <h2>SportShop Admin</h2>
        </div>
        
        <nav class="sidebar-menu">
            <div class="menu-item">
                <a href="/admin/dashboard">
                    <i class="fas fa-chart-pie"></i>
                    <span>Dashboard</span>
                </a>
            </div>
            <div class="menu-item">
                <a href="/admin/products" class="active">
                    <i class="fas fa-box"></i>
                    <span>Quản lý sản phẩm</span>
                </a>
            </div>
            <div class="menu-item">
                <a href="/admin/orders">
                    <i class="fas fa-shopping-cart"></i>
                    <span>Quản lý đơn hàng</span>
                </a>
            </div>
            <div class="menu-item">
                <a href="/admin/users">
                    <i class="fas fa-users"></i>
                    <span>Quản lý người dùng</span>
                </a>
            </div>
            <div class="menu-item">
                <a href="/admin/statistics">
                    <i class="fas fa-chart-bar"></i>
                    <span>Thống kê</span>
                </a>
            </div>
            <div class="menu-item">
                <a href="/admin/settings">
                    <i class="fas fa-cog"></i>
                    <span>Cài đặt</span>
                </a>
            </div>
        </nav>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Header -->
        <header class="header">
            <div class="header-left">
                <h1>Quản lý sản phẩm</h1>
            </div>
            <div class="header-right">
                <div class="user-info">
                    <div class="user-avatar">AS</div>
                    <div>
                        <div style="font-weight: 500;">Admin SportShop</div>
                        <div style="font-size: 0.8rem; color: #666;">admin@sportshop.com</div>
                    </div>
                </div>
            </div>
        </header>

        <!-- Content -->
        <div class="content">
            <!-- ✅ Debug Info -->
            <% if (typeof isDevelopment !== 'undefined' && isDevelopment) { %>
                <div class="debug-info">
                    <strong>🔍 DEBUG INFO:</strong><br>
                    Products loaded from database: <%= products ? products.length : 0 %><br>
                    Environment: <%= process.env.NODE_ENV || 'development' %><br>
                    Current user: <%= user ? user.email : 'Unknown' %>
                </div>
            <% } %>

            <!-- Action Buttons -->
            <div class="action-buttons">
                <button class="btn btn-primary" onclick="openAddProductModal()">
                    <i class="fas fa-plus"></i>
                    Thêm sản phẩm
                </button>
                <button class="btn btn-secondary" onclick="exportProducts()">
                    <i class="fas fa-download"></i>
                    Xuất Excel
                </button>
                <button class="btn btn-warning" onclick="bulkEdit()">
                    <i class="fas fa-edit"></i>
                    Chỉnh sửa hàng loạt
                </button>
                <a href="/" class="btn btn-success" target="_blank">
                    <i class="fas fa-eye"></i>
                    Xem trang chủ
                </a>
            </div>

            <!-- Filters -->
            <div class="filters">
                <div class="filter-group">
                    <label>Danh mục:</label>
                    <select id="categoryFilter" onchange="filterProducts()">
                        <option value="">Tất cả</option>
                        <option value="shoes">Giày dép</option>
                        <option value="tops">Áo</option>
                        <option value="bottoms">Quần</option>
                        <option value="accessories">Phụ kiện</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>Thương hiệu:</label>
                    <select id="brandFilter" onchange="filterProducts()">
                        <option value="">Tất cả</option>
                        <option value="Nike">Nike</option>
                        <option value="Adidas">Adidas</option>
                        <option value="Under Armour">Under Armour</option>
                        <option value="Puma">Puma</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>Trạng thái:</label>
                    <select id="statusFilter" onchange="filterProducts()">
                        <option value="">Tất cả</option>
                        <option value="active">Hoạt động</option>
                        <option value="inactive">Tạm dừng</option>
                        <option value="featured">Nổi bật</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>Giá từ:</label>
                    <input type="number" id="minPrice" placeholder="0" onchange="filterProducts()">
                </div>
                <div class="filter-group">
                    <label>đến:</label>
                    <input type="number" id="maxPrice" placeholder="999999" onchange="filterProducts()">
                </div>
                <button class="btn btn-secondary btn-sm" onclick="clearFilters()">
                    <i class="fas fa-times"></i>
                    Xóa bộ lọc
                </button>
            </div>

            <!-- Products Table -->
            <div class="products-table">
                <div class="table-header">
                    <h3>Danh sách sản phẩm</h3>
                    <div class="table-controls">
                        <div class="search-box">
                            <input type="text" id="searchInput" placeholder="Tìm kiếm sản phẩm..." onkeyup="searchProducts()">
                            <i class="fas fa-search"></i>
                        </div>
                        <select id="itemsPerPage" onchange="changeItemsPerPage()">
                            <option value="10">10 / trang</option>
                            <option value="25" selected>25 / trang</option>
                            <option value="50">50 / trang</option>
                            <option value="100">100 / trang</option>
                        </select>
                    </div>
                </div>

                <div class="table-container">
                    <table id="productsTable">
                        <thead>
                            <tr>
                                <th>
                                    <input type="checkbox" id="selectAll" onchange="toggleSelectAll()">
                                </th>
                                <th>Sản phẩm</th>
                                <th>Danh mục</th>
                                <th>Thương hiệu</th>
                                <th>Giá</th>
                                <th>Tồn kho</th>
                                <th>Trạng thái</th>
                                <th>Ngày tạo</th>
                                <th>Thao tác</th>
                            </tr>
                        </thead>
                        <tbody id="productsTableBody">
                            <!-- Products will be loaded here -->
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <div class="pagination" id="pagination">
                    <!-- Pagination will be loaded here -->
                </div>
            </div>
        </div>
    </div>

    <!-- Add/Edit Product Modal -->
    <div class="modal" id="productModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="modalTitle">Thêm sản phẩm mới</h3>
                <button class="close-btn" onclick="closeProductModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <form id="productForm">
                <input type="hidden" id="productId">
                
                <div class="form-group">
                    <label for="productName">Tên sản phẩm <span style="color: red;">*</span></label>
                    <input type="text" id="productName" name="name" required>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="productCategory">Danh mục <span style="color: red;">*</span></label>
                        <select id="productCategory" name="category" required>
                            <option value="">Chọn danh mục</option>
                            <option value="shoes">Giày dép</option>
                            <option value="tops">Áo</option>
                            <option value="bottoms">Quần</option>
                            <option value="accessories">Phụ kiện</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="productBrand">Thương hiệu <span style="color: red;">*</span></label>
                        <select id="productBrand" name="brand" required>
                            <option value="">Chọn thương hiệu</option>
                            <option value="Nike">Nike</option>
                            <option value="Adidas">Adidas</option>
                            <option value="Under Armour">Under Armour</option>
                            <option value="Puma">Puma</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                </div>

                <div class="form-group">
                    <label for="productDescription">Mô tả sản phẩm</label>
                    <textarea id="productDescription" name="description" rows="4" placeholder="Mô tả chi tiết về sản phẩm..."></textarea>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="productPrice">Giá bán <span style="color: red;">*</span></label>
                        <input type="number" id="productPrice" name="price" step="1000" required>
                    </div>
                    <div class="form-group">
                        <label for="productOriginalPrice">Giá gốc</label>
                        <input type="number" id="productOriginalPrice" name="originalPrice" step="1000">
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="productStock">Số lượng tồn kho <span style="color: red;">*</span></label>
                        <input type="number" id="productStock" name="stockQuantity" required>
                    </div>
                    <div class="form-group">
                        <label for="productSizes">Kích thước (ngăn cách bằng dấu phẩy)</label>
                        <input type="text" id="productSizes" name="sizes" placeholder="S, M, L, XL">
                    </div>
                </div>

                <div class="form-group">
                    <label for="productColors">Màu sắc (ngăn cách bằng dấu phẩy)</label>
                    <input type="text" id="productColors" name="colors" placeholder="Đỏ, Xanh, Vàng">
                </div>

                <!-- ✅ NEW: Image Upload Section -->
                <div class="form-group">
                    <label for="productImages">Hình ảnh sản phẩm</label>
                    
                    <!-- Upload Area -->
                    <div class="image-upload-section" id="imageUploadArea">
                        <div class="upload-area" onclick="document.getElementById('imageFiles').click()">
                            <div class="upload-icon">
                                <i class="fas fa-cloud-upload-alt"></i>
                            </div>
                            <div class="upload-text">
                                <strong>Kéo thả ảnh vào đây</strong> hoặc <strong>click để chọn file</strong>
                            </div>
                            <div class="upload-hint">
                                Hỗ trợ: JPG, PNG, GIF (tối đa 5MB mỗi file)
                            </div>
                        </div>
                        
                        <!-- Hidden File Input -->
                        <input type="file" id="imageFiles" class="file-input-hidden" 
                               multiple accept="image/*" onchange="handleFileSelect(event)">
                        
                        <!-- Image Preview Container -->
                        <div class="image-preview-container" id="imagePreviewContainer">
                            <!-- Uploaded images will appear here -->
                        </div>
                        
                        <!-- Uploaded Images List -->
                        <div class="uploaded-images-list" id="uploadedImagesList">
                            <strong>Ảnh đã upload:</strong>
                            <div id="uploadedImagesContainer">
                                <!-- Uploaded image URLs will appear here -->
                            </div>
                        </div>
                    </div>
                    
                    <!-- URL Input Section (Backup) -->
                    <div class="url-input-section">
                        <label for="productImageUrls">Hoặc nhập URL ảnh (ngăn cách bằng dấu phẩy)</label>
                        <input type="text" id="productImageUrls" name="images" 
                               placeholder="https://example.com/image1.jpg, https://example.com/image2.jpg">
                        <div style="font-size: 0.8rem; color: #666; margin-top: 5px;">
                            💡 Bạn có thể upload file hoặc nhập URL. Ảnh upload sẽ được ưu tiên.
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="productTags">Từ khóa (ngăn cách bằng dấu phẩy)</label>
                    <input type="text" id="productTags" name="tags" placeholder="thể thao, nam, nữ">
                </div>

                <div class="checkbox-group">
                    <input type="checkbox" id="productActive" name="isActive" value="true" checked>
                    <label for="productActive">Kích hoạt sản phẩm</label>
                </div>

                <div class="checkbox-group">
                    <input type="checkbox" id="productFeatured" name="isFeatured" value="true">
                    <label for="productFeatured">Sản phẩm nổi bật</label>
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn btn-primary" id="saveBtn">
                        <i class="fas fa-save"></i>
                        Lưu sản phẩm
                    </button>
                    <button type="button" class="btn btn-secondary" onclick="closeProductModal()">
                        <i class="fas fa-times"></i>
                        Hủy bỏ
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // ✅ GLOBAL VARIABLES - Load from server
        let products = [];
        let filteredProducts = [];
        let currentPage = 1;
        let itemsPerPage = 25;
        let uploadedImages = []; // Store uploaded image URLs

        // ✅ Initialize page with real data from server
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🔄 Admin Products page loading...');
            loadProductsFromServer();
            setupEventListeners();
            setupImageUpload();
        });

        function setupEventListeners() {
            // ✅ Form submission with server request
            document.getElementById('productForm').addEventListener('submit', function(e) {
                e.preventDefault();
                saveProductToServer();
            });

            // Close modal on outside click
            document.getElementById('productModal').addEventListener('click', function(e) {
                if (e.target === this) {
                    closeProductModal();
                }
            });
        }

        // ✅ IMAGE UPLOAD FUNCTIONALITY
        function setupImageUpload() {
            const uploadArea = document.getElementById('imageUploadArea');
            const fileInput = document.getElementById('imageFiles');

            // Drag and Drop events
            uploadArea.addEventListener('dragover', function(e) {
                e.preventDefault();
                uploadArea.classList.add('dragover');
            });

            uploadArea.addEventListener('dragleave', function(e) {
                e.preventDefault();
                uploadArea.classList.remove('dragover');
            });

            uploadArea.addEventListener('drop', function(e) {
                e.preventDefault();
                uploadArea.classList.remove('dragover');
                const files = e.dataTransfer.files;
                handleFiles(files);
            });
        }

        function handleFileSelect(event) {
            const files = event.target.files;
            handleFiles(files);
        }

        async function handleFiles(files) {
            const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
            const maxSize = 5 * 1024 * 1024; // 5MB
            
            for (let file of files) {
                // Validate file type
                if (!allowedTypes.includes(file.type)) {
                    showNotification(`File ${file.name} không đúng định dạng! Chỉ hỗ trợ JPG, PNG, GIF.`, 'error');
                    continue;
                }
                
                // Validate file size
                if (file.size > maxSize) {
                    showNotification(`File ${file.name} quá lớn! Tối đa 5MB.`, 'error');
                    continue;
                }
                
                // Upload file
                await uploadSingleImage(file);
            }
        }

        async function uploadSingleImage(file) {
            const previewContainer = document.getElementById('imagePreviewContainer');
            
            // Create preview element
            const previewDiv = document.createElement('div');
            previewDiv.className = 'image-preview';
            previewDiv.innerHTML = `
                <img class="preview-image" src="${URL.createObjectURL(file)}" alt="Preview">
                <div class="preview-actions">
                    <button type="button" class="preview-btn preview-btn-delete" onclick="removePreview(this)" title="Xóa">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="image-info">${file.name}</div>
                <div class="upload-progress">
                    <div class="progress-bar" id="progress-${Date.now()}"></div>
                </div>
            `;
            
            previewContainer.appendChild(previewDiv);
            
            // Prepare form data
            const formData = new FormData();
            formData.append('image', file);
            
            const progressBar = previewDiv.querySelector('.progress-bar');
            
            try {
                console.log('📤 Uploading image:', file.name);
                
                const response = await fetch('/admin/upload/product-image', {
                    method: 'POST',
                    body: formData
                });
                
                // Simulate progress for demo
                let progress = 0;
                const progressInterval = setInterval(() => {
                    progress += 10;
                    progressBar.style.width = progress + '%';
                    if (progress >= 90) {
                        clearInterval(progressInterval);
                    }
                }, 100);
                
                const result = await response.json();
                
                // Complete progress
                clearInterval(progressInterval);
                progressBar.style.width = '100%';
                
                if (result.success) {
                    console.log('✅ Image uploaded:', result.imageUrl);
                    
                    // Store uploaded image URL
                    uploadedImages.push(result.imageUrl);
                    
                    // Update preview with uploaded URL
                    const img = previewDiv.querySelector('.preview-image');
                    img.src = result.imageUrl;
                    
                    // Update image info
                    const imageInfo = previewDiv.querySelector('.image-info');
                    imageInfo.innerHTML = `
                        <i class="fas fa-check-circle" style="color: #28a745;"></i>
                        Upload thành công
                    `;
                    
                    // Add to uploaded images list
                    addToUploadedList(result.imageUrl, file.name);
                    
                    // Update main images input
                    updateImagesInput();
                    
                    showNotification('Upload ảnh thành công!', 'success');
                    
                } else {
                    throw new Error(result.message || 'Upload failed');
                }
                
            } catch (error) {
                console.error('❌ Upload error:', error);
                
                // Show error in preview
                previewDiv.innerHTML = `
                    <div style="padding: 20px; text-align: center; color: #dc3545;">
                        <i class="fas fa-exclamation-triangle" style="font-size: 2rem; margin-bottom: 10px;"></i>
                        <div>Upload thất bại</div>
                        <div class="upload-error">${error.message}</div>
                        <button type="button" class="preview-btn preview-btn-delete" onclick="removePreview(this)" style="margin-top: 10px;">
                            <i class="fas fa-times"></i> Xóa
                        </button>
                    </div>
                `;
                
                showNotification(`Upload thất bại: ${error.message}`, 'error');
            }
        }

        function removePreview(button) {
            const previewDiv = button.closest('.image-preview');
            const img = previewDiv.querySelector('.preview-image');
            
            if (img && img.src) {
                // Remove from uploaded images array
                const imageUrl = img.src;
                uploadedImages = uploadedImages.filter(url => url !== imageUrl);
                
                // Remove from uploaded list
                removeFromUploadedList(imageUrl);
                
                // Update main images input
                updateImagesInput();
            }
            
            previewDiv.remove();
        }

        function addToUploadedList(imageUrl, filename) {
            const uploadedList = document.getElementById('uploadedImagesList');
            const container = document.getElementById('uploadedImagesContainer');
            
            const item = document.createElement('div');
            item.className = 'uploaded-image-item';
            item.innerHTML = `
                <img src="${imageUrl}" class="uploaded-image-thumbnail" alt="Uploaded">
                <div class="uploaded-image-url">${filename}</div>
                <button type="button" class="preview-btn preview-btn-delete" onclick="removeUploadedImage('${imageUrl}', this)" title="Xóa">
                    <i class="fas fa-times"></i>
                </button>
            `;
            
            container.appendChild(item);
            uploadedList.classList.add('show');
        }

        function removeFromUploadedList(imageUrl) {
            const items = document.querySelectorAll('.uploaded-image-item');
            items.forEach(item => {
                const img = item.querySelector('.uploaded-image-thumbnail');
                if (img && img.src === imageUrl) {
                    item.remove();
                }
            });
            
            // Hide list if empty
            const container = document.getElementById('uploadedImagesContainer');
            if (container.children.length === 0) {
                document.getElementById('uploadedImagesList').classList.remove('show');
            }
        }

        function removeUploadedImage(imageUrl, button) {
            // Remove from array
            uploadedImages = uploadedImages.filter(url => url !== imageUrl);
            
            // Remove from DOM
            button.closest('.uploaded-image-item').remove();
            
            // Update input
            updateImagesInput();
            
            // Hide list if empty
            const container = document.getElementById('uploadedImagesContainer');
            if (container.children.length === 0) {
                document.getElementById('uploadedImagesList').classList.remove('show');
            }
        }

        function updateImagesInput() {
            const imageUrlsInput = document.getElementById('productImageUrls');
            const currentUrls = imageUrlsInput.value.split(',').map(url => url.trim()).filter(url => url);
            
            // Combine uploaded images with manual URLs (uploaded takes priority)
            const allImages = [...uploadedImages, ...currentUrls.filter(url => !uploadedImages.includes(url))];
            
            imageUrlsInput.value = allImages.join(', ');
        }

        // ✅ LOAD PRODUCTS FROM DATABASE
        async function loadProductsFromServer() {
            try {
                console.log('📡 Loading products from database...');
                
                // Show loading state
                const tableBody = document.getElementById('productsTableBody');
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="9" style="text-align: center; padding: 40px;">
                            <i class="fas fa-spinner fa-spin" style="font-size: 2rem; margin-bottom: 10px;"></i>
                            <br>Đang tải sản phẩm...
                        </td>
                    </tr>
                `;
                
                const response = await fetch('/admin/api/products', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                
                if (data.success) {
                    products = data.data || [];
                    filteredProducts = [...products];
                    
                    console.log('✅ Products loaded:', {
                        count: products.length,
                        featured: products.filter(p => p.isFeatured).length,
                        active: products.filter(p => p.inStock).length
                    });
                    
                    loadProducts();
                    showNotification(`Đã tải ${products.length} sản phẩm từ database`, 'success');
                } else {
                    throw new Error(data.message || 'Không thể tải sản phẩm');
                }
                
            } catch (error) {
                console.error('❌ Error loading products:', error);
                showNotification('Lỗi khi tải sản phẩm: ' + error.message, 'error');
                
                // Show error state
                const tableBody = document.getElementById('productsTableBody');
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="9" style="text-align: center; padding: 40px; color: #dc3545;">
                            <i class="fas fa-exclamation-triangle" style="font-size: 3rem; margin-bottom: 15px;"></i>
                            <br><strong>Lỗi tải dữ liệu</strong>
                            <br>${error.message}
                            <br><button class="btn btn-primary btn-sm" onclick="loadProductsFromServer()" style="margin-top: 15px;">
                                <i class="fas fa-refresh"></i> Thử lại
                            </button>
                        </td>
                    </tr>
                `;
            }
        }

        // ✅ SAVE PRODUCT TO SERVER (Add/Edit)
        async function saveProductToServer() {
            const form = document.getElementById('productForm');
            const formData = new FormData(form);
            const saveBtn = document.getElementById('saveBtn');
            
            // Get form data
            const productData = {
                name: document.getElementById('productName').value.trim(),
                category: document.getElementById('productCategory').value,
                brand: document.getElementById('productBrand').value,
                description: document.getElementById('productDescription').value.trim(),
                price: parseFloat(document.getElementById('productPrice').value),
                originalPrice: parseFloat(document.getElementById('productOriginalPrice').value) || parseFloat(document.getElementById('productPrice').value),
                stockQuantity: parseInt(document.getElementById('productStock').value),
                sizes: document.getElementById('productSizes').value,
                colors: document.getElementById('productColors').value,
                images: document.getElementById('productImageUrls').value, // This includes uploaded images
                tags: document.getElementById('productTags').value,
                isActive: document.getElementById('productActive').checked,
                isFeatured: document.getElementById('productFeatured').checked
            };

            // Validation
            if (!productData.name || !productData.category || !productData.brand || !productData.price || productData.stockQuantity < 0) {
                showNotification('Vui lòng điền đầy đủ thông tin bắt buộc!', 'error');
                return;
            }

            const productId = document.getElementById('productId').value;
            let url, method;
            
            // Set loading state
            saveBtn.classList.add('loading');
            saveBtn.disabled = true;
            
            try {
                if (productId) {
                    // Update existing product
                    url = `/admin/products/${productId}/edit`;
                    method = 'POST';
                    console.log('🔄 Updating product:', productId);
                } else {
                    // Add new product
                    url = '/admin/products/add';
                    method = 'POST';
                    console.log('🔄 Adding new product');
                }

                console.log('📤 Sending product data:', productData);

                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: new URLSearchParams(productData)
                });

                if (response.redirected || response.url.includes('/admin/products')) {
                    // Success - server redirected
                    const message = productId ? 'Cập nhật sản phẩm thành công!' : 'Thêm sản phẩm thành công!';
                    showNotification(message, 'success');
                    
                    closeProductModal();
                    
                    // ✅ Reload products from server to get fresh data
                    setTimeout(() => {
                        loadProductsFromServer();
                    }, 500);
                    
                } else {
                    // Handle error response
                    const errorText = await response.text();
                    console.error('❌ Server response:', errorText);
                    
                    // Try to extract error message
                    let errorMessage = 'Có lỗi xảy ra khi lưu sản phẩm';
                    if (errorText.includes('error')) {
                        errorMessage = 'Lỗi validation hoặc database';
                    }
                    
                    showNotification(errorMessage, 'error');
                }

            } catch (error) {
                console.error('❌ Save product error:', error);
                showNotification('Lỗi kết nối! Vui lòng thử lại.', 'error');
            } finally {
                // Remove loading state
                saveBtn.classList.remove('loading');
                saveBtn.disabled = false;
            }
        }

        // ✅ DELETE PRODUCT FROM SERVER
        async function deleteProductFromServer(id) {
            if (!confirm('Bạn có chắc chắn muốn xóa sản phẩm này?')) return;

            try {
                console.log('🗑️ Deleting product:', id);
                
                const response = await fetch(`/admin/products/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                const data = await response.json();
                
                if (data.success) {
                    showNotification('Xóa sản phẩm thành công!', 'success');
                    // Reload products from server
                    loadProductsFromServer();
                } else {
                    throw new Error(data.message || 'Không thể xóa sản phẩm');
                }

            } catch (error) {
                console.error('❌ Delete product error:', error);
                showNotification('Lỗi khi xóa sản phẩm: ' + error.message, 'error');
            }
        }

        // ✅ Display products in table
        function loadProducts() {
            const tableBody = document.getElementById('productsTableBody');
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const paginatedProducts = filteredProducts.slice(startIndex, endIndex);

            tableBody.innerHTML = '';

            if (paginatedProducts.length === 0) {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="9" class="no-data-message">
                            <i class="fas fa-box-open"></i>
                            <h3>Không tìm thấy sản phẩm nào</h3>
                            <p>Hãy thử thay đổi bộ lọc hoặc thêm sản phẩm mới</p>
                            <button class="btn btn-primary btn-sm" onclick="openAddProductModal()" style="margin-top: 15px;">
                                <i class="fas fa-plus"></i> Thêm sản phẩm đầu tiên
                            </button>
                        </td>
                    </tr>
                `;
                updatePagination();
                return;
            }

            paginatedProducts.forEach(product => {
                const row = createProductRow(product);
                tableBody.appendChild(row);
            });

            updatePagination();
        }

        function createProductRow(product) {
            const row = document.createElement('tr');
            
            // Status badges
            const statusBadges = [];
            if (product.inStock !== false) {
                statusBadges.push('<span class="status-badge status-active">Hoạt động</span>');
            } else {
                statusBadges.push('<span class="status-badge status-inactive">Tạm dừng</span>');
            }
            if (product.isFeatured) {
                statusBadges.push('<span class="status-badge status-featured">Nổi bật</span>');
            }

            // Format date
            const createdDate = product.createdAt ? new Date(product.createdAt).toLocaleDateString('vi-VN') : 'N/A';
            
            // Format price
            const formattedPrice = typeof product.getFormattedPrice === 'function' ? 
                product.getFormattedPrice() : 
                (product.price ? product.price.toLocaleString('vi-VN') + 'đ' : '0đ');
                
            const formattedOriginalPrice = product.originalPrice && product.originalPrice > product.price ?
                product.originalPrice.toLocaleString('vi-VN') + 'đ' : null;

            row.innerHTML = `
                <td>
                    <input type="checkbox" class="product-checkbox" value="${product._id}">
                </td>
                <td>
                    <div class="product-info">
                        ${product.imageUrl && product.imageUrl.startsWith('http') ? 
                            `<img src="${product.imageUrl}" alt="${product.name}" class="product-image" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                             <div class="product-emoji" style="display: none;">${product.image || '📦'}</div>` :
                            `<div class="product-emoji">${product.image || '📦'}</div>`
                        }
                        <div class="product-details">
                            <h4>${product.name}</h4>
                            <p>ID: ${product._id}</p>
                        </div>
                    </div>
                </td>
                <td>${getCategoryName(product.category)}</td>
                <td>${product.brand}</td>
                <td>
                    <div>
                        <strong>${formattedPrice}</strong>
                        ${formattedOriginalPrice ? 
                            `<br><small style="text-decoration: line-through; color: #999;">${formattedOriginalPrice}</small>` : 
                            ''
                        }
                    </div>
                </td>
                <td>
                    <span style="color: ${product.stockQuantity > 10 ? '#28a745' : product.stockQuantity > 0 ? '#ffc107' : '#dc3545'}">
                        ${product.stockQuantity || 0} sản phẩm
                    </span>
                </td>
                <td>
                    ${statusBadges.join(' ')}
                </td>
                <td>${createdDate}</td>
                <td>
                    <div class="action-buttons-cell">
                        <button class="btn btn-sm btn-primary" onclick="editProduct('${product._id}')" title="Chỉnh sửa">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-success" onclick="viewProduct('${product._id}')" title="Xem chi tiết">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="deleteProductFromServer('${product._id}')" title="Xóa">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            `;

            return row;
        }

        function updatePagination() {
            const pagination = document.getElementById('pagination');
            const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);
            
            if (totalPages <= 1) {
                pagination.innerHTML = '';
                return;
            }

            let paginationHTML = '';

            // Previous button
            paginationHTML += `
                <button class="pagination-btn" ${currentPage === 1 ? 'disabled' : ''} onclick="changePage(${currentPage - 1})">
                    <i class="fas fa-chevron-left"></i>
                </button>
            `;

            // Page numbers
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, currentPage + 2);

            if (startPage > 1) {
                paginationHTML += `<button class="pagination-btn" onclick="changePage(1)">1</button>`;
                if (startPage > 2) {
                    paginationHTML += `<span>...</span>`;
                }
            }

            for (let i = startPage; i <= endPage; i++) {
                paginationHTML += `
                    <button class="pagination-btn ${i === currentPage ? 'active' : ''}" onclick="changePage(${i})">
                        ${i}
                    </button>
                `;
            }

            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    paginationHTML += `<span>...</span>`;
                }
                paginationHTML += `<button class="pagination-btn" onclick="changePage(${totalPages})">${totalPages}</button>`;
            }

            // Next button
            paginationHTML += `
                <button class="pagination-btn" ${currentPage === totalPages ? 'disabled' : ''} onclick="changePage(${currentPage + 1})">
                    <i class="fas fa-chevron-right"></i>
                </button>
            `;

            pagination.innerHTML = paginationHTML;
            
            // Update info
            const startItem = (currentPage - 1) * itemsPerPage + 1;
            const endItem = Math.min(currentPage * itemsPerPage, filteredProducts.length);
            const totalItems = filteredProducts.length;
            
            pagination.innerHTML += `
                <div style="margin-left: 20px; color: #666; font-size: 0.9rem;">
                    Hiển thị ${startItem}-${endItem} trong ${totalItems} sản phẩm
                </div>
            `;
        }

        function changePage(page) {
            currentPage = page;
            loadProducts();
        }

        function changeItemsPerPage() {
            itemsPerPage = parseInt(document.getElementById('itemsPerPage').value);
            currentPage = 1;
            loadProducts();
        }

        // ✅ Filter functions
        function filterProducts() {
            const category = document.getElementById('categoryFilter').value;
            const brand = document.getElementById('brandFilter').value;
            const status = document.getElementById('statusFilter').value;
            const minPrice = parseFloat(document.getElementById('minPrice').value) || 0;
            const maxPrice = parseFloat(document.getElementById('maxPrice').value) || Infinity;

            filteredProducts = products.filter(product => {
                const matchCategory = !category || product.category === category;
                const matchBrand = !brand || product.brand === brand;
                const matchPrice = product.price >= minPrice && product.price <= maxPrice;
                
                let matchStatus = true;
                if (status === 'active') matchStatus = product.inStock !== false;
                else if (status === 'inactive') matchStatus = product.inStock === false;
                else if (status === 'featured') matchStatus = product.isFeatured;

                return matchCategory && matchBrand && matchPrice && matchStatus;
            });

            currentPage = 1;
            loadProducts();
        }

        function searchProducts() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            
            if (!searchTerm) {
                filteredProducts = [...products];
            } else {
                filteredProducts = products.filter(product => 
                    product.name.toLowerCase().includes(searchTerm) ||
                    product.brand.toLowerCase().includes(searchTerm) ||
                    (product._id && product._id.toString().includes(searchTerm)) ||
                    (product.description && product.description.toLowerCase().includes(searchTerm))
                );
            }

            currentPage = 1;
            loadProducts();
        }

        function clearFilters() {
            document.getElementById('categoryFilter').value = '';
            document.getElementById('brandFilter').value = '';
            document.getElementById('statusFilter').value = '';
            document.getElementById('minPrice').value = '';
            document.getElementById('maxPrice').value = '';
            document.getElementById('searchInput').value = '';
            
            filteredProducts = [...products];
            currentPage = 1;
            loadProducts();
        }

        // Select all functionality
        function toggleSelectAll() {
            const selectAll = document.getElementById('selectAll');
            const checkboxes = document.querySelectorAll('.product-checkbox');
            
            checkboxes.forEach(checkbox => {
                checkbox.checked = selectAll.checked;
            });
        }

        function getSelectedProducts() {
            const checkboxes = document.querySelectorAll('.product-checkbox:checked');
            return Array.from(checkboxes).map(cb => cb.value);
        }

        // ✅ Modal functions with real data and image upload reset
        function openAddProductModal() {
            document.getElementById('modalTitle').textContent = 'Thêm sản phẩm mới';
            document.getElementById('productForm').reset();
            document.getElementById('productId').value = '';
            document.getElementById('productActive').checked = true;
            
            // ✅ Reset upload area
            resetImageUpload();
            
            document.getElementById('productModal').classList.add('show');
        }

        function editProduct(id) {
            const product = products.find(p => p._id === id);
            if (!product) {
                showNotification('Không tìm thấy sản phẩm!', 'error');
                return;
            }

            console.log('✏️ Editing product:', product);

            document.getElementById('modalTitle').textContent = 'Chỉnh sửa sản phẩm';
            document.getElementById('productId').value = product._id;
            document.getElementById('productName').value = product.name || '';
            document.getElementById('productCategory').value = product.category || '';
            document.getElementById('productBrand').value = product.brand || '';
            document.getElementById('productDescription').value = product.description || '';
            document.getElementById('productPrice').value = product.price || '';
            document.getElementById('productOriginalPrice').value = product.originalPrice || '';
            document.getElementById('productStock').value = product.stockQuantity || '';
            
            // Handle arrays
            document.getElementById('productSizes').value = Array.isArray(product.sizes) ? product.sizes.join(', ') : (product.sizes || '');
            document.getElementById('productColors').value = Array.isArray(product.colors) ? product.colors.join(', ') : (product.colors || '');
            document.getElementById('productImageUrls').value = Array.isArray(product.images) ? product.images.join(', ') : (product.images || '');
            document.getElementById('productTags').value = Array.isArray(product.tags) ? product.tags.join(', ') : (product.tags || '');
            
            document.getElementById('productActive').checked = product.inStock !== false;
            document.getElementById('productFeatured').checked = product.isFeatured === true;
            
            // ✅ Reset upload area for editing
            resetImageUpload();
            
            // ✅ Show existing images if any
            if (product.images && Array.isArray(product.images) && product.images.length > 0) {
                showExistingImages(product.images);
            }
            
            document.getElementById('productModal').classList.add('show');
        }

        function resetImageUpload() {
            // Clear uploaded images array
            uploadedImages = [];
            
            // Clear preview container
            document.getElementById('imagePreviewContainer').innerHTML = '';
            
            // Clear uploaded images list
            document.getElementById('uploadedImagesContainer').innerHTML = '';
            document.getElementById('uploadedImagesList').classList.remove('show');
            
            // Reset file input
            document.getElementById('imageFiles').value = '';
        }

        function showExistingImages(images) {
            const container = document.getElementById('uploadedImagesContainer');
            const uploadedList = document.getElementById('uploadedImagesList');
            
            images.forEach((imageUrl, index) => {
                if (imageUrl && imageUrl.trim()) {
                    const item = document.createElement('div');
                    item.className = 'uploaded-image-item';
                    item.innerHTML = `
                        <img src="${imageUrl}" class="uploaded-image-thumbnail" alt="Existing image" onerror="this.src='/images/placeholder.jpg'">
                        <div class="uploaded-image-url">Ảnh hiện tại ${index + 1}</div>
                        <button type="button" class="preview-btn preview-btn-delete" onclick="removeExistingImage('${imageUrl}', this)" title="Xóa">
                            <i class="fas fa-times"></i>
                        </button>
                    `;
                    container.appendChild(item);
                }
            });
            
            if (container.children.length > 0) {
                uploadedList.classList.add('show');
            }
        }

        function removeExistingImage(imageUrl, button) {
            // Remove from display
            button.closest('.uploaded-image-item').remove();
            
            // Update the images input by removing this URL
            const imageUrlsInput = document.getElementById('productImageUrls');
            const currentUrls = imageUrlsInput.value.split(',').map(url => url.trim()).filter(url => url);
            const filteredUrls = currentUrls.filter(url => url !== imageUrl);
            imageUrlsInput.value = filteredUrls.join(', ');
            
            // Hide list if empty
            const container = document.getElementById('uploadedImagesContainer');
            if (container.children.length === 0) {
                document.getElementById('uploadedImagesList').classList.remove('show');
            }
            
            showNotification('Đã xóa ảnh khỏi danh sách', 'success');
        }

        function closeProductModal() {
            document.getElementById('productModal').classList.remove('show');
            // Don't reset on close in case user wants to reopen
        }

        function viewProduct(id) {
            const product = products.find(p => p._id === id);
            if (!product) return;

            const details = `Chi tiết sản phẩm:

Tên: ${product.name}
Danh mục: ${getCategoryName(product.category)}
Thương hiệu: ${product.brand}
Giá: ${product.price?.toLocaleString('vi-VN')}đ
Tồn kho: ${product.stockQuantity || 0}
Trạng thái: ${product.inStock !== false ? 'Hoạt động' : 'Tạm dừng'}
Nổi bật: ${product.isFeatured ? 'Có' : 'Không'}
Mô tả: ${product.description || 'Không có'}`;

            alert(details);
        }

        // Bulk operations
        function bulkEdit() {
            const selectedIds = getSelectedProducts();
            if (selectedIds.length === 0) {
                showNotification('Vui lòng chọn ít nhất một sản phẩm!', 'warning');
                return;
            }

            const action = prompt('Chọn thao tác:\n1. Kích hoạt\n2. Tạm dừng\n3. Đặt nổi bật\n4. Bỏ nổi bật\n5. Xóa\n\nNhập số (1-5):');
            
            // TODO: Implement bulk operations with server API
            showNotification('Tính năng đang phát triển...', 'warning');
        }

        function exportProducts() {
            const selectedIds = getSelectedProducts();
            const productsToExport = selectedIds.length > 0 ? 
                products.filter(p => selectedIds.includes(p._id)) : 
                filteredProducts;

            if (productsToExport.length === 0) {
                showNotification('Không có sản phẩm nào để xuất!', 'warning');
                return;
            }

            // Generate CSV
            let csv = 'ID,Tên sản phẩm,Danh mục,Thương hiệu,Giá,Giá gốc,Tồn kho,Trạng thái,Nổi bật,Ngày tạo\n';
            
            productsToExport.forEach(product => {
                const createdDate = product.createdAt ? new Date(product.createdAt).toLocaleDateString('vi-VN') : 'N/A';
                csv += `"${product._id}","${product.name}","${getCategoryName(product.category)}","${product.brand}",${product.price},${product.originalPrice || product.price},${product.stockQuantity || 0},"${product.inStock !== false ? 'Hoạt động' : 'Tạm dừng'}","${product.isFeatured ? 'Có' : 'Không'}","${createdDate}"\n`;
            });

            // Download CSV
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', `san-pham-${new Date().toISOString().split('T')[0]}.csv`);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            showNotification(`Đã xuất ${productsToExport.length} sản phẩm!`, 'success');
        }

        // ✅ Utility functions
        function getCategoryName(category) {
            const categories = {
                'shoes': 'Giày dép',
                'tops': 'Áo',
                'bottoms': 'Quần',
                'accessories': 'Phụ kiện'
            };
            return categories[category] || category;
        }

        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            document.body.appendChild(notification);
            
            setTimeout(() => notification.classList.add('show'), 100);
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => {
                    if (notification.parentNode) {
                        document.body.removeChild(notification);
                    }
                }, 300);
            }, 3000);
        }
    </script>
</body>
</html>