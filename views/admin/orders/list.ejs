<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f8fafc;
            color: #333;
            line-height: 1.6;
        }

        /* Sidebar */
        .sidebar {
            position: fixed;
            left: 0;
            top: 0;
            width: 260px;
            height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            overflow-y: auto;
            z-index: 1000;
            transition: all 0.3s ease;
        }

        .sidebar-header {
            padding: 20px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .sidebar-header h2 {
            font-size: 1.4rem;
            font-weight: 600;
        }

        .sidebar-menu {
            padding: 20px 0;
        }

        .menu-item {
            margin-bottom: 5px;
        }

        .menu-item a {
            display: flex;
            align-items: center;
            padding: 12px 20px;
            color: rgba(255,255,255,0.8);
            text-decoration: none;
            transition: all 0.3s ease;
            position: relative;
        }

        .menu-item a:hover {
            background: rgba(255,255,255,0.1);
            color: white;
            transform: translateX(5px);
        }

        .menu-item a.active {
            background: rgba(255,255,255,0.2);
            color: white;
        }

        .menu-item a.active::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 4px;
            background: white;
        }

        .menu-item i {
            width: 20px;
            margin-right: 15px;
            text-align: center;
            font-size: 1.1rem;
        }

        /* Main Content */
        .main-content {
            margin-left: 260px;
            min-height: 100vh;
        }

        /* Header */
        .header {
            background: white;
            padding: 15px 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-left h1 {
            font-size: 1.8rem;
            color: #333;
            font-weight: 600;
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .user-avatar {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea, #764ba2);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
        }

        /* Content */
        .content {
            padding: 30px;
        }

        /* Action Buttons */
        .action-buttons {
            display: flex;
            gap: 15px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .btn-warning {
            background: #ffc107;
            color: #212529;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-sm {
            padding: 8px 15px;
            font-size: 0.9rem;
        }

        /* Filters */
        .filters {
            background: white;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            margin-bottom: 25px;
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            align-items: center;
        }

        .filter-group {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .filter-group label {
            font-weight: 500;
            color: #333;
        }

        .filter-group select,
        .filter-group input {
            padding: 8px 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            transition: border-color 0.3s ease;
        }

        .filter-group select:focus,
        .filter-group input:focus {
            outline: none;
            border-color: #667eea;
        }

        /* Orders Table */
        .orders-table {
            background: white;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            overflow: hidden;
        }

        .table-header {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .table-header h3 {
            font-size: 1.3rem;
            font-weight: 600;
        }

        .table-controls {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .search-box {
            position: relative;
        }

        .search-box input {
            padding: 8px 35px 8px 12px;
            border: 2px solid rgba(255,255,255,0.3);
            border-radius: 8px;
            background: rgba(255,255,255,0.1);
            color: white;
            width: 250px;
        }

        .search-box input::placeholder {
            color: rgba(255,255,255,0.7);
        }

        .search-box i {
            position: absolute;
            right: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: rgba(255,255,255,0.7);
        }

        .table-container {
            overflow-x: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #f1f5f9;
        }

        th {
            background: #f8fafc;
            font-weight: 600;
            color: #333;
        }

        .order-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .order-details h4 {
            font-weight: 600;
            color: #333;
            margin-bottom: 3px;
        }

        .order-details p {
            color: #666;
            font-size: 0.9rem;
        }

        .status-badge {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
        }

        .status-pending {
            background: #fff3cd;
            color: #856404;
        }

        .status-confirmed {
            background: #d4edda;
            color: #155724;
        }

        .status-processing {
            background: #d4edda;
            color: #155724;
        }

        .status-shipping {
            background: #cce5ff;
            color: #004085;
        }

        .status-shipped {
            background: #cce5ff;
            color: #004085;
        }

        .status-delivered {
            background: #d1ecf1;
            color: #0c5460;
        }

        .status-cancelled {
            background: #f8d7da;
            color: #721c24;
        }

        .action-buttons-cell {
            display: flex;
            gap: 8px;
        }

        /* Customer Info */
        .customer-info {
            display: flex;
            flex-direction: column;
        }

        .customer-name {
            font-weight: 600;
            color: #333;
            margin-bottom: 2px;
        }

        .customer-email {
            font-size: 0.85rem;
            color: #666;
        }

        /* Order ID Cell */
        .order-id-cell h4 {
            font-weight: 600;
            color: #333;
            margin-bottom: 3px;
        }

        .order-id-cell p {
            color: #666;
            font-size: 0.85rem;
        }

        /* Items Info */
        .items-info {
            display: flex;
            flex-direction: column;
        }

        .items-count {
            font-weight: 600;
            color: #333;
            margin-bottom: 2px;
        }

        .items-details {
            font-size: 0.85rem;
            color: #666;
        }

        /* Amount Cell */
        .amount-cell {
            display: flex;
            flex-direction: column;
        }

        .total-amount {
            font-weight: 600;
            color: #2563eb;
            margin-bottom: 2px;
        }

        .shipping-fee {
            font-size: 0.8rem;
            color: #666;
        }

        /* Date Cell */
        .date-cell {
            display: flex;
            flex-direction: column;
        }

        .date-main {
            font-weight: 500;
            color: #333;
            margin-bottom: 2px;
        }

        .date-time {
            font-size: 0.8rem;
            color: #666;
        }

        /* Pagination */
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
            margin-top: 25px;
        }

        .pagination-btn {
            padding: 8px 15px;
            border: 2px solid #e0e0e0;
            background: white;
            color: #666;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
        }

        .pagination-btn:hover {
            border-color: #667eea;
            color: #667eea;
        }

        .pagination-btn.active {
            background: #667eea;
            color: white;
            border-color: #667eea;
        }

        .pagination-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }

        .empty-state i {
            font-size: 4rem;
            margin-bottom: 20px;
            color: #ccc;
        }

        .empty-state h3 {
            font-size: 1.5rem;
            margin-bottom: 10px;
            color: #374151;
        }

        .empty-state p {
            margin-bottom: 20px;
            line-height: 1.6;
        }

        /* Status Update Modal */
        .status-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 2000;
        }

        .status-modal.show {
            display: flex;
        }

        .status-modal-content {
            background: white;
            border-radius: 15px;
            padding: 30px;
            max-width: 400px;
            width: 90%;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
        }

        .status-modal h3 {
            margin-bottom: 20px;
            color: #333;
            font-size: 1.3rem;
        }

        .status-options {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-bottom: 25px;
        }

        .status-option {
            padding: 12px 15px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .status-option:hover {
            border-color: #667eea;
            background: #f8f9ff;
        }

        .status-option.selected {
            border-color: #667eea;
            background: #667eea;
            color: white;
        }

        .status-option-icon {
            font-size: 1.2rem;
        }

        .status-option-text {
            font-weight: 500;
        }

        .status-modal-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
        }

        .modal-btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .modal-btn-cancel {
            background: #f1f5f9;
            color: #64748b;
        }

        .modal-btn-cancel:hover {
            background: #e2e8f0;
        }

        .modal-btn-confirm {
            background: #667eea;
            color: white;
        }

        .modal-btn-confirm:hover {
            background: #5a6fd8;
        }

        .modal-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
            }

            .main-content {
                margin-left: 0;
            }

            .header {
                padding: 15px 20px;
            }

            .content {
                padding: 20px;
            }

            .filters {
                flex-direction: column;
                align-items: stretch;
            }

            .action-buttons {
                flex-direction: column;
            }

            .table-container {
                font-size: 0.9rem;
            }

            .search-box input {
                width: 200px;
            }

            .status-modal-content {
                margin: 20px;
                padding: 20px;
            }
        }

        /* Notification */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 10px;
            color: white;
            font-weight: 500;
            z-index: 3000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.success {
            background: #28a745;
        }

        .notification.error {
            background: #dc3545;
        }

        .notification.warning {
            background: #ffc107;
            color: #212529;
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="sidebar-header">
            <h2>SportShop Admin</h2>
        </div>
        
        <nav class="sidebar-menu">
            <div class="menu-item">
                <a href="/admin/">
                    <i class="fas fa-chart-pie"></i>
                    <span>Dashboard</span>
                </a>
            </div>
            <div class="menu-item">
                <a href="/admin/products">
                    <i class="fas fa-box"></i>
                    <span>Quản lý sản phẩm</span>
                </a>
            </div>
            <div class="menu-item">
                <a href="/admin/orders" class="active">
                    <i class="fas fa-shopping-cart"></i>
                    <span>Quản lý đơn hàng</span>
                </a>
            </div>
            <div class="menu-item">
                <a href="/admin/users">
                    <i class="fas fa-users"></i>
                    <span>Quản lý người dùng</span>
                </a>
            </div>
            <div class="menu-item">
                <a href="/admin/statistics">
                    <i class="fas fa-chart-bar"></i>
                    <span>Thống kê</span>
                </a>
            </div>
            <div class="menu-item">
                <a href="#" onclick="showSection('settings')">
                    <i class="fas fa-cog"></i>
                    <span>Cài đặt</span>
                </a>
            </div>
        </nav>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Header -->
        <header class="header">
            <div class="header-left">
                <h1>Quản lý đơn hàng</h1>
            </div>
            <div class="header-right">
                <div class="user-info">
                    <div class="user-avatar">AS</div>
                    <div>
                        <div style="font-weight: 500;">Admin SportShop</div>
                        <div style="font-size: 0.8rem; color: #666;">admin@sportshop.com</div>
                    </div>
                </div>
            </div>
        </header>

        <!-- Content -->
        <div class="content">
            <!-- Action Buttons -->
            <div class="action-buttons">
                <button class="btn btn-primary" onclick="refreshOrders()">
                    <i class="fas fa-sync"></i>
                    Làm mới
                </button>
                <button class="btn btn-secondary" onclick="exportOrders()">
                    <i class="fas fa-download"></i>
                    Xuất Excel
                </button>
                <button class="btn btn-warning" onclick="bulkUpdateStatus()">
                    <i class="fas fa-edit"></i>
                    Cập nhật hàng loạt
                </button>
            </div>

            <!-- Filters -->
            <div class="filters">
                <div class="filter-group">
                    <label>Trạng thái:</label>
                    <select id="statusFilter" onchange="filterOrders()">
                        <option value="">Tất cả</option>
                        <option value="pending">Chờ xử lý</option>
                        <option value="confirmed">Đã xác nhận</option>
                        <option value="shipping">Đang giao</option>
                        <option value="delivered">Đã giao</option>
                        <option value="cancelled">Đã hủy</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>Từ ngày:</label>
                    <input type="date" id="fromDate" onchange="filterOrders()">
                </div>
                <div class="filter-group">
                    <label>Đến ngày:</label>
                    <input type="date" id="toDate" onchange="filterOrders()">
                </div>
                <div class="filter-group">
                    <label>Giá trị từ:</label>
                    <input type="number" id="minAmount" placeholder="0" onchange="filterOrders()">
                </div>
                <div class="filter-group">
                    <label>đến:</label>
                    <input type="number" id="maxAmount" placeholder="999999" onchange="filterOrders()">
                </div>
                <button class="btn btn-secondary btn-sm" onclick="clearFilters()">
                    <i class="fas fa-times"></i>
                    Xóa bộ lọc
                </button>
            </div>

            <!-- Orders Table -->
            <div class="orders-table">
                <div class="table-header">
                    <h3>Danh sách đơn hàng</h3>
                    <div class="table-controls">
                        <div class="search-box">
                            <input type="text" id="searchInput" placeholder="Tìm kiếm đơn hàng..." onkeyup="searchOrders()">
                            <i class="fas fa-search"></i>
                        </div>
                        <select id="itemsPerPage" onchange="changeItemsPerPage()">
                            <option value="10">10 / trang</option>
                            <option value="25" selected>25 / trang</option>
                            <option value="50">50 / trang</option>
                            <option value="100">100 / trang</option>
                        </select>
                    </div>
                </div>

                <div class="table-container">
                    <table id="ordersTable">
                        <thead>
                            <tr>
                                <th>
                                    <input type="checkbox" id="selectAll" onchange="toggleSelectAll()">
                                </th>
                                <th>Mã đơn hàng</th>
                                <th>Khách hàng</th>
                                <th>Sản phẩm</th>
                                <th>Tổng tiền</th>
                                <th>Trạng thái</th>
                                <th>Ngày đặt</th>
                                <th>Thao tác</th>
                            </tr>
                        </thead>
                        <tbody id="ordersTableBody">
                            <!-- ✅ HIỂN THỊ DỮ LIỆU THẬT TỪ DATABASE -->
                            <% if (orders && orders.length > 0) { %>
                                <% orders.forEach((order, index) => { %>
                                    <tr>
                                        <td>
                                            <input type="checkbox" class="order-checkbox" value="<%= order._id %>">
                                        </td>
                                        <td>
                                            <div class="order-id-cell">
                                                <h4><%= order.orderId %></h4>
                                                <p>ID: <%= order._id.toString().substring(0, 8) %>...</p>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="customer-info">
                                                <div class="customer-name"><%= order.customer.name %></div>
                                                <div class="customer-email"><%= order.customer.email %></div>
                                                <% if (order.customer.phone) { %>
                                                    <div style="font-size: 0.8rem; color: #666;">📱 <%= order.customer.phone %></div>
                                                <% } %>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="items-info">
                                                <div class="items-count"><%= order.totalItems %> sản phẩm</div>
                                                <% if (order.items && order.items.length > 0) { %>
                                                    <div class="items-details">
                                                        <%= order.items.slice(0, 2).map(item => item.productName).join(', ') %>
                                                        <% if (order.items.length > 2) { %>
                                                            và <%= order.items.length - 2 %> sản phẩm khác
                                                        <% } %>
                                                    </div>
                                                <% } %>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="amount-cell">
                                                <div class="total-amount"><%= order.finalTotal.toLocaleString('vi-VN') %>₫</div>
                                                <% if (order.shippingFee > 0) { %>
                                                    <div class="shipping-fee">(+ <%= order.shippingFee.toLocaleString('vi-VN') %>₫ ship)</div>
                                                <% } %>
                                            </div>
                                        </td>
                                        <td>
                                            <% 
                                                const statusConfig = {
                                                    'pending': { text: 'Chờ xử lý', class: 'status-pending' },
                                                    'confirmed': { text: 'Đã xác nhận', class: 'status-confirmed' },
                                                    'shipping': { text: 'Đang giao', class: 'status-shipping' },
                                                    'delivered': { text: 'Đã giao', class: 'status-delivered' },
                                                    'cancelled': { text: 'Đã hủy', class: 'status-cancelled' }
                                                };
                                                const status = statusConfig[order.status] || statusConfig['pending'];
                                            %>
                                            <span class="status-badge <%= status.class %>">
                                                <%= status.text %>
                                            </span>
                                        </td>
                                        <td>
                                            <div class="date-cell">
                                                <div class="date-main"><%= new Date(order.createdAt).toLocaleDateString('vi-VN') %></div>
                                                <div class="date-time"><%= new Date(order.createdAt).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' }) %></div>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="action-buttons-cell">
                                                <button class="btn btn-sm btn-primary" onclick="viewOrder('<%= order._id %>')" title="Xem chi tiết">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                <button class="btn btn-sm btn-success" onclick="updateOrderStatus('<%= order._id %>')" title="Cập nhật">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <% if (order.status !== 'delivered' && order.status !== 'cancelled') { %>
                                                    <button class="btn btn-sm btn-danger" onclick="cancelOrder('<%= order._id %>')" title="Hủy đơn">
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                <% } %>
                                            </div>
                                        </td>
                                    </tr>
                                <% }); %>
                            <% } else { %>
                                <!-- Empty State -->
                                <tr>
                                    <td colspan="8" class="empty-state">
                                        <i class="fas fa-shopping-cart"></i>
                                        <h3>Chưa có đơn hàng nào</h3>
                                        <p>
                                            <% if (filters && (filters.search || filters.status || filters.fromDate)) { %>
                                                Không tìm thấy đơn hàng nào phù hợp với bộ lọc hiện tại.<br>
                                                <button class="btn btn-secondary btn-sm" onclick="clearFilters()" style="margin-top: 10px;">
                                                    <i class="fas fa-times"></i> Xóa bộ lọc
                                                </button>
                                            <% } else { %>
                                                Khi khách hàng đặt hàng, đơn hàng sẽ hiển thị ở đây.<br>
                                                <small style="color: #9ca3af;">💡 Kiểm tra xem quá trình checkout có hoạt động đúng không.</small>
                                            <% } %>
                                        </p>
                                    </td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <div class="pagination">
                    <% if (pagination && pagination.total > 0) { %>
                        <% if (pagination.hasPrev) { %>
                            <a href="?page=<%= pagination.currentPage - 1 %>" class="pagination-btn">
                                <i class="fas fa-chevron-left"></i>
                            </a>
                        <% } else { %>
                            <button class="pagination-btn" disabled>
                                <i class="fas fa-chevron-left"></i>
                            </button>
                        <% } %>
                        
                        <% 
                            const startPage = Math.max(1, pagination.currentPage - 2);
                            const endPage = Math.min(pagination.totalPages, pagination.currentPage + 2);
                        %>
                        
                        <% for (let i = startPage; i <= endPage; i++) { %>
                            <% if (i === pagination.currentPage) { %>
                                <button class="pagination-btn active"><%= i %></button>
                            <% } else { %>
                                <a href="?page=<%= i %>" class="pagination-btn"><%= i %></a>
                            <% } %>
                        <% } %>
                        
                        <% if (pagination.hasNext) { %>
                            <a href="?page=<%= pagination.currentPage + 1 %>" class="pagination-btn">
                                <i class="fas fa-chevron-right"></i>
                            </a>
                        <% } else { %>
                            <button class="pagination-btn" disabled>
                                <i class="fas fa-chevron-right"></i>
                            </button>
                        <% } %>
                        
                        <div style="margin-left: 20px; color: #666; font-size: 0.9rem;">
                            Hiển thị <%= Math.min(pagination.limit, pagination.total) %> trong <%= pagination.total %> đơn hàng
                            (Trang <%= pagination.currentPage %>/<%= pagination.totalPages %>)
                        </div>
                    <% } else { %>
                        <div style="color: #666; font-size: 0.9rem;">
                            Không có dữ liệu để hiển thị
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <!-- Status Update Modal -->
    <div class="status-modal" id="statusModal">
        <div class="status-modal-content">
            <h3>Cập nhật trạng thái đơn hàng</h3>
            <div class="status-options" id="statusOptions">
                <div class="status-option" data-status="pending">
                    <span class="status-option-icon">⏳</span>
                    <span class="status-option-text">Chờ xử lý</span>
                </div>
                <div class="status-option" data-status="confirmed">
                    <span class="status-option-icon">✅</span>
                    <span class="status-option-text">Đã xác nhận</span>
                </div>
                <div class="status-option" data-status="shipping">
                    <span class="status-option-icon">🚚</span>
                    <span class="status-option-text">Đang giao</span>
                </div>
                <div class="status-option" data-status="delivered">
                    <span class="status-option-icon">📦</span>
                    <span class="status-option-text">Đã giao</span>
                </div>
                <div class="status-option" data-status="cancelled">
                    <span class="status-option-icon">❌</span>
                    <span class="status-option-text">Đã hủy</span>
                </div>
            </div>
            <div class="status-modal-actions">
                <button class="modal-btn modal-btn-cancel" onclick="closeStatusModal()">Hủy</button>
                <button class="modal-btn modal-btn-confirm" id="confirmStatusBtn" onclick="confirmStatusUpdate()" disabled>Cập nhật</button>
            </div>
        </div>
    </div>

    <script>
        // Global variables for status modal
        let currentOrderId = '';
        let selectedStatus = '';

        // Filter orders
        function filterOrders() {
            console.log('Filtering orders...');
            showNotification('Đã lọc đơn hàng', 'success');
        }

        // Search orders
        function searchOrders() {
            console.log('Searching orders...');
        }

        // Clear filters
        function clearFilters() {
            document.getElementById('statusFilter').value = '';
            document.getElementById('fromDate').value = '';
            document.getElementById('toDate').value = '';
            document.getElementById('minAmount').value = '';
            document.getElementById('maxAmount').value = '';
            document.getElementById('searchInput').value = '';
            showNotification('Đã xóa bộ lọc', 'success');
        }

        // Toggle select all
        function toggleSelectAll() {
            const selectAll = document.getElementById('selectAll');
            const checkboxes = document.querySelectorAll('.order-checkbox');
            
            checkboxes.forEach(checkbox => {
                checkbox.checked = selectAll.checked;
            });
        }

        // View order details
        function viewOrder(id) {
            window.location.href = `/admin/orders/${id}`;
        }

        // Update order status - NEW VERSION with Modal
        function updateOrderStatus(id) {
            currentOrderId = id;
            selectedStatus = '';
            
            // Reset modal state
            document.querySelectorAll('.status-option').forEach(option => {
                option.classList.remove('selected');
            });
            document.getElementById('confirmStatusBtn').disabled = true;
            
            // Show modal
            document.getElementById('statusModal').classList.add('show');
        }

        // Close status modal
        function closeStatusModal() {
            document.getElementById('statusModal').classList.remove('show');
            currentOrderId = '';
            selectedStatus = '';
        }

        // Handle status option selection
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.status-option').forEach(option => {
                option.addEventListener('click', function() {
                    // Remove selected class from all options
                    document.querySelectorAll('.status-option').forEach(opt => {
                        opt.classList.remove('selected');
                    });
                    
                    // Add selected class to clicked option
                    this.classList.add('selected');
                    selectedStatus = this.dataset.status;
                    
                    // Enable confirm button
                    document.getElementById('confirmStatusBtn').disabled = false;
                });
            });
        });

        // Confirm status update
        function confirmStatusUpdate() {
            if (!selectedStatus || !currentOrderId) {
                showNotification('Vui lòng chọn trạng thái!', 'warning');
                return;
            }

            // Call API to update status
            fetch(`/admin/orders/${currentOrderId}/status`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ status: selectedStatus })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification('Cập nhật trạng thái thành công!', 'success');
                    closeStatusModal();
                    location.reload();
                } else {
                    showNotification('Lỗi: ' + data.message, 'error');
                }
            })
            .catch(error => {
                showNotification('Có lỗi xảy ra!', 'error');
                console.error('Error:', error);
            });
        }

        // Close modal when clicking outside
        document.getElementById('statusModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeStatusModal();
            }
        });

        // Cancel order
        function cancelOrder(id) {
            if (confirm('Bạn có chắc chắn muốn hủy đơn hàng này?')) {
                // Call API to cancel order
                fetch(`/admin/orders/${id}/status`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ status: 'cancelled' })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showNotification('Đơn hàng đã được hủy!', 'success');
                        location.reload();
                    } else {
                        showNotification('Lỗi: ' + data.message, 'error');
                    }
                })
                .catch(error => {
                    showNotification('Có lỗi xảy ra!', 'error');
                });
            }
        }

        // Refresh orders
        function refreshOrders() {
            location.reload();
        }

        // Export orders
        function exportOrders() {
            showNotification('Đang xuất dữ liệu...', 'success');
            window.open('/admin/orders/export', '_blank');
        }

        // Bulk update status - IMPROVED VERSION
        function bulkUpdateStatus() {
            const selectedOrders = Array.from(document.querySelectorAll('.order-checkbox:checked')).map(cb => cb.value);
            if (selectedOrders.length === 0) {
                showNotification('Vui lòng chọn ít nhất một đơn hàng!', 'warning');
                return;
            }
            
            // Use the same modal for bulk update
            currentOrderId = selectedOrders; // Store array of IDs
            selectedStatus = '';
            
            // Reset modal state
            document.querySelectorAll('.status-option').forEach(option => {
                option.classList.remove('selected');
            });
            document.getElementById('confirmStatusBtn').disabled = true;
            
            // Update modal title for bulk update
            document.querySelector('.status-modal h3').textContent = `Cập nhật trạng thái cho ${selectedOrders.length} đơn hàng`;
            
            // Show modal
            document.getElementById('statusModal').classList.add('show');
        }

        // Updated confirm function to handle both single and bulk updates
        function confirmStatusUpdate() {
            if (!selectedStatus) {
                showNotification('Vui lòng chọn trạng thái!', 'warning');
                return;
            }

            const isArray = Array.isArray(currentOrderId);
            const orders = isArray ? currentOrderId : [currentOrderId];
            
            if (isArray) {
                // Bulk update
                Promise.all(orders.map(orderId => 
                    fetch(`/admin/orders/${orderId}/status`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ status: selectedStatus })
                    })
                ))
                .then(responses => Promise.all(responses.map(r => r.json())))
                .then(results => {
                    const successCount = results.filter(r => r.success).length;
                    showNotification(`Đã cập nhật ${successCount}/${orders.length} đơn hàng!`, 'success');
                    closeStatusModal();
                    location.reload();
                })
                .catch(error => {
                    showNotification('Có lỗi xảy ra khi cập nhật hàng loạt!', 'error');
                    console.error('Error:', error);
                });
            } else {
                // Single update
                fetch(`/admin/orders/${currentOrderId}/status`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ status: selectedStatus })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showNotification('Cập nhật trạng thái thành công!', 'success');
                        closeStatusModal();
                        location.reload();
                    } else {
                        showNotification('Lỗi: ' + data.message, 'error');
                    }
                })
                .catch(error => {
                    showNotification('Có lỗi xảy ra!', 'error');
                    console.error('Error:', error);
                });
            }
        }

        // Updated close modal function
        function closeStatusModal() {
            document.getElementById('statusModal').classList.remove('show');
            currentOrderId = '';
            selectedStatus = '';
            
            // Reset modal title
            document.querySelector('.status-modal h3').textContent = 'Cập nhật trạng thái đơn hàng';
        }

        // Change items per page
        function changeItemsPerPage() {
            const itemsPerPage = document.getElementById('itemsPerPage').value;
            const url = new URL(window.location);
            url.searchParams.set('limit', itemsPerPage);
            url.searchParams.set('page', 1);
            window.location = url;
        }

        // Show notification
        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            document.body.appendChild(notification);
            
            setTimeout(() => notification.classList.add('show'), 100);
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => {
                    if (document.body.contains(notification)) {
                        document.body.removeChild(notification);
                    }
                }, 300);
            }, 3000);
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Orders management initialized');
            
            // Set current filter values from URL params
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('status')) {
                document.getElementById('statusFilter').value = urlParams.get('status');
            }
            if (urlParams.get('fromDate')) {
                document.getElementById('fromDate').value = urlParams.get('fromDate');
            }
            if (urlParams.get('toDate')) {
                document.getElementById('toDate').value = urlParams.get('toDate');
            }
            if (urlParams.get('search')) {
                document.getElementById('searchInput').value = urlParams.get('search');
            }
        });

        // Real-time filter functionality
        function applyFilters() {
            const status = document.getElementById('statusFilter').value;
            const fromDate = document.getElementById('fromDate').value;
            const toDate = document.getElementById('toDate').value;
            const minAmount = document.getElementById('minAmount').value;
            const maxAmount = document.getElementById('maxAmount').value;
            const search = document.getElementById('searchInput').value;
            
            const url = new URL(window.location);
            url.searchParams.set('page', 1);
            
            if (status) url.searchParams.set('status', status);
            else url.searchParams.delete('status');
            
            if (fromDate) url.searchParams.set('fromDate', fromDate);
            else url.searchParams.delete('fromDate');
            
            if (toDate) url.searchParams.set('toDate', toDate);
            else url.searchParams.delete('toDate');
            
            if (search) url.searchParams.set('search', search);
            else url.searchParams.delete('search');
            
            window.location = url;
        }

        // Update filter functions to use real filtering
        function filterOrders() {
            applyFilters();
        }

        function searchOrders() {
            applyFilters();
        }

        // Debounce search input
        let searchTimeout;
        document.getElementById('searchInput').addEventListener('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                applyFilters();
            }, 500);
        });
    </script>
</body>
</html>