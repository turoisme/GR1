<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }
        
        /* Header */
        header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }
        
        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .logo {
            font-size: 2rem;
            font-weight: bold;
            background: linear-gradient(45deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .nav-links {
            display: flex;
            list-style: none;
            gap: 30px;
        }
        
        .nav-links a {
            text-decoration: none;
            color: #333;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        
        .nav-links a:hover {
            color: #667eea;
            transform: translateY(-2px);
        }
        
        .user-menu {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .cart-btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 25px;
            text-decoration: none;
            font-weight: bold;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }
        
        .cart-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(45deg, #667eea, #764ba2);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }
        
        /* Main Content */
        main {
            padding: 40px 0;
        }
        
        .page-header {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 40px 0;
            text-align: center;
            margin: 40px 0;
            border-radius: 20px;
            color: white;
        }
        
        .page-header h1 {
            font-size: 2.5rem;
            margin-bottom: 15px;
            text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }
        
        /* Profile Container */
        .profile-container {
            display: grid;
            grid-template-columns: 300px 1fr;
            gap: 30px;
            margin: 40px 0;
        }
        
        .sidebar {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 30px;
            border-radius: 20px;
            height: fit-content;
            position: sticky;
            top: 120px;
        }
        
        .profile-content {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 40px;
            border-radius: 20px;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.1);
        }
        
        /* Sidebar Menu */
        .sidebar-menu {
            list-style: none;
        }
        
        .sidebar-menu li {
            margin-bottom: 10px;
        }
        
        .sidebar-menu a {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 15px;
            text-decoration: none;
            color: #333;
            border-radius: 10px;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        
        .sidebar-menu a:hover {
            background: rgba(102, 126, 234, 0.1);
            color: #667eea;
            transform: translateX(5px);
        }
        
        .sidebar-menu a.active {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
        }
        
        /* Form Styles */
        .form-section {
            margin-bottom: 40px;
        }
        
        .section-title {
            font-size: 1.5rem;
            font-weight: bold;
            margin-bottom: 20px;
            color: #333;
            display: flex;
            align-items: center;
            gap: 10px;
            padding-bottom: 10px;
            border-bottom: 2px solid #f0f0f0;
        }
        
        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            font-weight: 600;
            margin-bottom: 8px;
            color: #333;
        }
        
        .required {
            color: #e74c3c;
        }
        
        .form-group input,
        .form-group select {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e0e0e0;
            border-radius: 10px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: white;
        }
        
        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        .form-group input.error,
        .form-group select.error {
            border-color: #e74c3c;
            background-color: #fff5f5;
        }
        
        .error-message {
            color: #e74c3c;
            font-size: 14px;
            margin-top: 5px;
            display: none;
        }
        
        /* Button Styles */
        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 10px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
        }
        
        .btn.primary {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }
        
        .btn.secondary {
            background: white;
            color: #667eea;
            border: 2px solid #667eea;
        }
        
        .btn.danger {
            background: linear-gradient(45deg, #dc3545, #c82333);
            color: white;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);
        }
        
        .btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        /* Action Buttons */
        .form-actions {
            display: flex;
            gap: 15px;
            justify-content: flex-end;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #eee;
        }
        
        /* Profile Avatar */
        .profile-avatar {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .avatar-display {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            background: linear-gradient(45deg, #667eea, #764ba2);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 3rem;
            font-weight: bold;
            margin: 0 auto 20px;
            box-shadow: 0 8px 30px rgba(102, 126, 234, 0.3);
        }
        
        .avatar-name {
            font-size: 1.2rem;
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .avatar-email {
            color: #666;
            font-size: 0.9rem;
        }
        
        /* Password Change */
        .password-section {
            background: rgba(252, 248, 227, 0.8);
            padding: 30px;
            border-radius: 15px;
            border: 2px solid #f39c12;
        }
        
        /* Notification */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(45deg, #28a745, #20c997);
            color: white;
            padding: 15px 25px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(40, 167, 69, 0.3);
            transform: translateX(400px);
            transition: transform 0.3s ease;
            z-index: 1001;
        }
        
        .notification.show {
            transform: translateX(0);
        }
        
        .notification.error {
            background: linear-gradient(45deg, #dc3545, #c82333);
        }
        
        /* Footer */
        footer {
            background: rgba(0, 0, 0, 0.8);
            color: white;
            text-align: center;
            padding: 40px 0;
            margin-top: 60px;
            backdrop-filter: blur(10px);
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .nav-links {
                display: none;
            }
            
            .profile-container {
                grid-template-columns: 1fr;
                gap: 20px;
            }
            
            .sidebar {
                position: static;
                order: -1;
            }
            
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .form-actions {
                flex-direction: column;
            }
            
            .page-header h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <header>
        <nav class="container">
            <div class="logo">SportShop</div>
            <ul class="nav-links">
                <li><a href="/">Trang chủ</a></li>
                <li><a href="/products">Sản phẩm</a></li>
                <li><a href="/about">Giới thiệu</a></li>
                <li><a href="/contact">Liên hệ</a></li>
            </ul>
            <div class="user-menu">
                <a href="/cart" class="cart-btn">
                    🛒 Giỏ hàng (<%= typeof cartItemCount !== 'undefined' ? cartItemCount : 0 %>)
                </a>
                <div class="user-avatar" title="<%= user.fullName %>">
                    <%= user.initials || user.fullName.charAt(0) %>
                </div>
            </div>
        </nav>
    </header>

    <main class="container">
        <!-- Page Header -->
        <section class="page-header">
            <h1>👤 Thông tin cá nhân</h1>
            <p>Quản lý và cập nhật thông tin tài khoản của bạn</p>
        </section>

        <!-- Profile Container -->
        <div class="profile-container">
            <!-- Sidebar -->
            <div class="sidebar">
                <div class="profile-avatar">
                    <div class="avatar-display">
                        <%= user.initials || user.fullName.charAt(0) %>
                    </div>
                    <div class="avatar-name"><%= user.fullName %></div>
                    <div class="avatar-email"><%= user.email %></div>
                </div>
                
                <h3 style="margin-bottom: 20px; color: #333;">👤 Tài khoản</h3>
                <ul class="sidebar-menu">
                    <li><a href="/user/account">🏠 Tổng quan</a></li>
                    <li><a href="/user/profile" class="active">👤 Thông tin cá nhân</a></li>
                    <li><a href="/user/addresses">📍 Địa chỉ giao hàng</a></li>
                    <li><a href="/user/orders">📦 Đơn hàng</a></li>
                    <li><a href="/user/favorites">❤️ Sản phẩm yêu thích</a></li>
                    <li><a href="/user/notifications">🔔 Thông báo</a></li>
                </ul>
                
                <hr style="margin: 20px 0; border: none; border-top: 1px solid #eee;">
                
                <ul class="sidebar-menu">
                    <li><a href="#" onclick="logout()" style="color: #dc3545;">🚪 Đăng xuất</a></li>
                </ul>
            </div>

            <!-- Profile Content -->
            <div class="profile-content">
                <!-- Personal Information Form -->
                <form id="profileForm">
                    <div class="form-section">
                        <h2 class="section-title">
                            👤 Thông tin cơ bản
                        </h2>
                        
                        <div class="form-row">
                            <div class="form-group">
                                <label for="firstName">Họ <span class="required">*</span></label>
                                <input type="text" id="firstName" name="firstName" value="<%= user.firstName %>" required>
                                <div class="error-message">Họ không được để trống</div>
                            </div>
                            
                            <div class="form-group">
                                <label for="lastName">Tên <span class="required">*</span></label>
                                <input type="text" id="lastName" name="lastName" value="<%= user.lastName %>" required>
                                <div class="error-message">Tên không được để trống</div>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label for="email">Email</label>
                            <input type="email" id="email" value="<%= user.email %>" disabled 
                                   style="background: #f5f5f5; cursor: not-allowed;">
                            <small style="color: #666; font-size: 12px;">
                                Email không thể thay đổi. Liên hệ hỗ trợ nếu cần cập nhật.
                            </small>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group">
                                <label for="phone">Số điện thoại</label>
                                <input type="tel" id="phone" name="phone" value="<%= user.phone || '' %>" 
                                       placeholder="0123456789">
                                <div class="error-message">Số điện thoại không hợp lệ</div>
                            </div>
                            
                            <div class="form-group">
                                <label for="birthDate">Ngày sinh</label>
                                <input type="date" id="birthDate" name="birthDate" 
                                       value="<%= user.birthDate ? user.birthDate.toISOString().split('T')[0] : '' %>">
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label for="gender">Giới tính</label>
                            <select id="gender" name="gender">
                                <option value="male" <%= user.gender === 'male' ? 'selected' : '' %>>Nam</option>
                                <option value="female" <%= user.gender === 'female' ? 'selected' : '' %>>Nữ</option>
                                <option value="other" <%= user.gender === 'other' ? 'selected' : '' %>>Khác</option>
                            </select>
                        </div>
                        
                        <div class="form-actions">
                            <button type="button" class="btn secondary" onclick="resetForm()">
                                🔄 Hủy thay đổi
                            </button>
                            <button type="submit" class="btn primary">
                                💾 Lưu thay đổi
                            </button>
                        </div>
                    </div>
                </form>

                <!-- Password Change Section -->
                <div class="form-section">
                    <div class="password-section">
                        <h2 class="section-title">
                            🔒 Thay đổi mật khẩu
                        </h2>
                        
                        <form id="passwordForm">
                            <div class="form-group">
                                <label for="currentPassword">Mật khẩu hiện tại <span class="required">*</span></label>
                                <input type="password" id="currentPassword" name="currentPassword" required>
                                <div class="error-message">Vui lòng nhập mật khẩu hiện tại</div>
                            </div>
                            
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="newPassword">Mật khẩu mới <span class="required">*</span></label>
                                    <input type="password" id="newPassword" name="newPassword" required>
                                    <div class="error-message">Mật khẩu mới phải có ít nhất 6 ký tự</div>
                                </div>
                                
                                <div class="form-group">
                                    <label for="confirmPassword">Xác nhận mật khẩu mới <span class="required">*</span></label>
                                    <input type="password" id="confirmPassword" name="confirmPassword" required>
                                    <div class="error-message">Mật khẩu xác nhận không khớp</div>
                                </div>
                            </div>
                            
                            <div class="form-actions">
                                <button type="button" class="btn secondary" onclick="resetPasswordForm()">
                                    🔄 Hủy
                                </button>
                                <button type="submit" class="btn danger">
                                    🔒 Đổi mật khẩu
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Notification -->
    <div class="notification" id="notification"></div>

    <footer>
        <div class="container">
            <p>&copy; 2025 SportShop - Dự án của Nguyễn Thanh Tân</p>
            <p>📧 Tan.NT225923@sis.hust.edu.vn | 📱 0866 387 718</p>
        </div>
    </footer>

    <script>
        // Store original form data
        let originalFormData = {};
        
        document.addEventListener('DOMContentLoaded', function() {
            // Store original form data
            const form = document.getElementById('profileForm');
            originalFormData = new FormData(form);
            
            // Add input event listeners for real-time validation
            setupValidation();
        });
        
        // Profile form submission
        document.getElementById('profileForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            if (!validateProfileForm()) {
                return;
            }
            
            const formData = new FormData(this);
            const data = Object.fromEntries(formData);
            
            // Show loading state
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '⏳ Đang lưu...';
            submitBtn.disabled = true;
            
            fetch('/user/profile', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification('✅ ' + data.message, 'success');
                    // Update page data
                    updateUserInfo(data.data);
                } else {
                    showNotification('❌ ' + data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showNotification('❌ Có lỗi xảy ra khi cập nhật thông tin', 'error');
            })
            .finally(() => {
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            });
        });
        
        // Password form submission
        document.getElementById('passwordForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            if (!validatePasswordForm()) {
                return;
            }
            
            const formData = new FormData(this);
            const data = Object.fromEntries(formData);
            
            // Show loading state
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '⏳ Đang đổi...';
            submitBtn.disabled = true;
            
            fetch('/user/change-password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification('✅ ' + data.message, 'success');
                    resetPasswordForm();
                } else {
                    showNotification('❌ ' + data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showNotification('❌ Có lỗi xảy ra khi đổi mật khẩu', 'error');
            })
            .finally(() => {
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            });
        });
        
        // Validation functions
        function validateProfileForm() {
            const firstName = document.getElementById('firstName').value.trim();
            const lastName = document.getElementById('lastName').value.trim();
            const phone = document.getElementById('phone').value.trim();
            
            let isValid = true;
            
            // First name validation
            if (!firstName || firstName.length < 2) {
                showFieldError('firstName', 'Họ phải có ít nhất 2 ký tự');
                isValid = false;
            } else {
                hideFieldError('firstName');
            }
            
            // Last name validation
            if (!lastName || lastName.length < 2) {
                showFieldError('lastName', 'Tên phải có ít nhất 2 ký tự');
                isValid = false;
            } else {
                hideFieldError('lastName');
            }
            
            // Phone validation (optional but must be valid if provided)
            if (phone && !/^[0-9]{10,11}$/.test(phone.replace(/[\s\-\(\)]/g, ''))) {
                showFieldError('phone', 'Số điện thoại phải có 10-11 chữ số');
                isValid = false;
            } else {
                hideFieldError('phone');
            }
            
            return isValid;
        }
        
        function validatePasswordForm() {
            const currentPassword = document.getElementById('currentPassword').value;
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            let isValid = true;
            
            // Current password
            if (!currentPassword) {
                showFieldError('currentPassword', 'Vui lòng nhập mật khẩu hiện tại');
                isValid = false;
            } else {
                hideFieldError('currentPassword');
            }
            
            // New password
            if (!newPassword || newPassword.length < 6) {
                showFieldError('newPassword', 'Mật khẩu mới phải có ít nhất 6 ký tự');
                isValid = false;
            } else {
                hideFieldError('newPassword');
            }
            
            // Confirm password
            if (newPassword !== confirmPassword) {
                showFieldError('confirmPassword', 'Mật khẩu xác nhận không khớp');
                isValid = false;
            } else {
                hideFieldError('confirmPassword');
            }
            
            // Check if new password is different from current
            if (newPassword && currentPassword && newPassword === currentPassword) {
                showFieldError('newPassword', 'Mật khẩu mới phải khác mật khẩu hiện tại');
                isValid = false;
            }
            
            return isValid;
        }
        
        function showFieldError(fieldId, message) {
            const field = document.getElementById(fieldId);
            const errorMsg = field.parentNode.querySelector('.error-message');
            
            field.classList.add('error');
            if (errorMsg) {
                errorMsg.textContent = message;
                errorMsg.style.display = 'block';
            }
        }
        
        function hideFieldError(fieldId) {
            const field = document.getElementById(fieldId);
            const errorMsg = field.parentNode.querySelector('.error-message');
            
            field.classList.remove('error');
            if (errorMsg) {
                errorMsg.style.display = 'none';
            }
        }
        
        function setupValidation() {
            // Real-time validation for profile form
            ['firstName', 'lastName', 'phone'].forEach(fieldId => {
                document.getElementById(fieldId).addEventListener('input', function() {
                    hideFieldError(fieldId);
                });
            });
            
            // Real-time validation for password form
            ['currentPassword', 'newPassword', 'confirmPassword'].forEach(fieldId => {
                document.getElementById(fieldId).addEventListener('input', function() {
                    hideFieldError(fieldId);
                });
            });
        }
        
        // Reset functions
        function resetForm() {
            const form = document.getElementById('profileForm');
            
            // Reset to original values
            document.getElementById('firstName').value = '<%= user.firstName %>';
            document.getElementById('lastName').value = '<%= user.lastName %>';
            document.getElementById('phone').value = '<%= user.phone || "" %>';
            document.getElementById('birthDate').value = '<%= user.birthDate ? user.birthDate.toISOString().split("T")[0] : "" %>';
            document.getElementById('gender').value = '<%= user.gender || "male" %>';
            
            // Clear all errors
            form.querySelectorAll('.error').forEach(el => el.classList.remove('error'));
            form.querySelectorAll('.error-message').forEach(el => el.style.display = 'none');
        }
        
        function resetPasswordForm() {
            const form = document.getElementById('passwordForm');
            form.reset();
            
            // Clear all errors
            form.querySelectorAll('.error').forEach(el => el.classList.remove('error'));
            form.querySelectorAll('.error-message').forEach(el => el.style.display = 'none');
        }
        
        // Update user info in UI
        function updateUserInfo(userData) {
            if (userData.fullName) {
                document.querySelector('.avatar-name').textContent = userData.fullName;
                // Update avatar initials
                document.querySelector('.user-avatar').textContent = userData.initials;
                document.querySelector('.avatar-display').textContent = userData.initials;
            }
        }
        
        // Logout function
        function logout() {
            if (confirm('Bạn có chắc muốn đăng xuất?')) {
                fetch('/auth/logout', {
                    method: 'POST'
                })
                .then(() => {
                    window.location.href = '/';
                });
            }
        }
        
        // Show notification
        function showNotification(message, type = 'success') {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = type === 'error' ? 'notification error show' : 'notification show';
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, 3000);
        }
        
        // Handle page unload with unsaved changes
        let formChanged = false;
        
        document.getElementById('profileForm').addEventListener('input', function() {
            formChanged = true;
        });
        
        window.addEventListener('beforeunload', function(e) {
            if (formChanged) {
                e.preventDefault();
                e.returnValue = 'Bạn có thay đổi chưa được lưu. Bạn có chắc muốn rời khỏi trang?';
            }
        });
        
        // Mark form as saved after successful submission
        document.getElementById('profileForm').addEventListener('submit', function() {
            formChanged = false;
        });
    </script>
</body>
</html>