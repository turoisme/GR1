<!-- views/user/addresses.ejs -->
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Header - Tương tự các trang khác */
        header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 1rem 0;
            position: sticky;
            top: 0;
            z-index: 100;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }

        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        .logo {
            font-size: 2rem;
            font-weight: bold;
            background: linear-gradient(45deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .nav-links {
            display: flex;
            list-style: none;
            gap: 30px;
        }

        .nav-links a {
            text-decoration: none;
            color: #333;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .nav-links a:hover {
            color: #667eea;
            transform: translateY(-2px);
        }

        .user-menu {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .user-dropdown {
            position: relative;
        }

        .user-btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 25px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .user-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        /* Page Title */
        .page-title {
            text-align: center;
            margin-bottom: 40px;
            color: white;
        }

        .page-title h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }

        .page-title p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        /* Main Content */
        .main-content {
            display: grid;
            grid-template-columns: 250px 1fr;
            gap: 30px;
            max-width: 1200px;
            margin: 0 auto;
        }

        /* Sidebar */
        .sidebar {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 25px;
            height: fit-content;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .sidebar h3 {
            color: #333;
            margin-bottom: 20px;
            font-size: 1.2rem;
        }

        .sidebar-menu {
            list-style: none;
        }

        .sidebar-menu li {
            margin-bottom: 10px;
        }

        .sidebar-menu a {
            display: flex;
            align-items: center;
            padding: 12px 15px;
            text-decoration: none;
            color: #666;
            border-radius: 8px;
            transition: all 0.3s;
        }

        .sidebar-menu a:hover,
        .sidebar-menu a.active {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            transform: translateX(5px);
        }

        /* Content Area */
        .content-area {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .content-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 2px solid #f0f0f0;
        }

        .content-header h2 {
            color: #333;
            font-size: 1.8rem;
        }

        .add-address-btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .add-address-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        /* Address Grid */
        .addresses-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .address-card {
            background: #f8f9ff;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 20px;
            transition: all 0.3s;
            position: relative;
            overflow: hidden;
        }

        .address-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border-color: #667eea;
        }

        .address-card.default {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-color: #667eea;
        }

        .default-badge {
            position: absolute;
            top: 10px;
            right: 10px;
            background: #28a745;
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .address-type {
            background: rgba(102, 126, 234, 0.1);
            color: #667eea;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 600;
            text-transform: uppercase;
            display: inline-block;
            margin-bottom: 15px;
        }

        .address-card.default .address-type {
            background: rgba(255, 255, 255, 0.2);
            color: white;
        }

        .address-info h4 {
            color: #333;
            font-size: 1.1rem;
            margin-bottom: 8px;
        }

        .address-card.default .address-info h4 {
            color: white;
        }

        .address-info p {
            color: #666;
            margin-bottom: 5px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .address-card.default .address-info p {
            color: rgba(255, 255, 255, 0.9);
        }

        .address-actions {
            display: flex;
            gap: 10px;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #e9ecef;
        }

        .address-card.default .address-actions {
            border-top-color: rgba(255, 255, 255, 0.2);
        }

        .action-btn {
            flex: 1;
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            font-size: 0.9rem;
            cursor: pointer;
            transition: all 0.3s;
            text-align: center;
            text-decoration: none;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 5px;
        }

        .edit-btn {
            background: #17a2b8;
            color: white;
        }

        .edit-btn:hover {
            background: #138496;
            transform: translateY(-1px);
        }

        .delete-btn {
            background: #dc3545;
            color: white;
        }

        .delete-btn:hover {
            background: #c82333;
            transform: translateY(-1px);
        }

        .set-default-btn {
            background: #28a745;
            color: white;
        }

        .set-default-btn:hover {
            background: #218838;
            transform: translateY(-1px);
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }

        .empty-state .empty-icon {
            font-size: 4rem;
            margin-bottom: 20px;
        }

        .empty-state h3 {
            font-size: 1.5rem;
            margin-bottom: 10px;
            color: #333;
        }

        .empty-state p {
            font-size: 1rem;
            margin-bottom: 25px;
            max-width: 400px;
            margin-left: auto;
            margin-right: auto;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
            z-index: 1000;
        }

        .modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: white;
            border-radius: 12px;
            padding: 30px;
            max-width: 500px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f0f0f0;
        }

        .modal-header h3 {
            color: #333;
            font-size: 1.4rem;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #666;
            padding: 5px;
            border-radius: 50%;
            width: 35px;
            height: 35px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s;
        }

        .close-btn:hover {
            background: #f0f0f0;
            color: #333;
        }

        /* Form Styles */
        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #333;
            font-weight: 500;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s;
        }

        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }

        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 10px;
        }

        .checkbox-group input[type="checkbox"] {
            width: auto;
            margin: 0;
        }

        .form-actions {
            display: flex;
            gap: 15px;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 2px solid #f0f0f0;
        }

        .btn {
            flex: 1;
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
            text-align: center;
            text-decoration: none;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #5a6268;
            transform: translateY(-2px);
        }

        /* Notification */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 1001;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.success {
            background: #28a745;
        }

        .notification.error {
            background: #dc3545;
        }

        /* Flash Messages */
        .flash-messages {
            margin-bottom: 20px;
        }

        .alert {
            padding: 12px 20px;
            border-radius: 8px;
            margin-bottom: 10px;
            font-weight: 500;
        }

        .alert-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .alert-error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        /* Footer */
        footer {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 20px 0;
            margin-top: 50px;
            text-align: center;
            color: #666;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
                gap: 20px;
            }

            .sidebar {
                order: 2;
            }

            .content-area {
                order: 1;
            }

            .addresses-grid {
                grid-template-columns: 1fr;
            }

            .form-row {
                grid-template-columns: 1fr;
            }

            .page-title h1 {
                font-size: 2rem;
            }

            .content-header {
                flex-direction: column;
                gap: 15px;
                align-items: stretch;
            }

            .nav-links {
                display: none;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header>
        <nav>
            <div class="logo">🏃‍♂️ SportShop</div>
            <ul class="nav-links">
                <li><a href="/">Trang chủ</a></li>
                <li><a href="/products">Sản phẩm</a></li>
                <li><a href="/about">Giới thiệu</a></li>
                <li><a href="/contact">Liên hệ</a></li>
            </ul>
            <div class="user-menu">
                <% if (typeof user !== 'undefined' && user) { %>
                    <div class="user-dropdown">
                        <button class="user-btn" onclick="toggleUserMenu()">
                            👤 <%= user.firstName || user.fullName %>
                        </button>
                    </div>
                <% } else { %>
                    <a href="/auth/login" class="user-btn">Đăng nhập</a>
                <% } %>
            </div>
        </nav>
    </header>

    <div class="container">
        <!-- Flash Messages -->
        <% if (typeof success !== 'undefined' && success.length > 0) { %>
            <div class="flash-messages">
                <% success.forEach(msg => { %>
                    <div class="alert alert-success"><%= msg %></div>
                <% }) %>
            </div>
        <% } %>

        <% if (typeof error !== 'undefined' && error.length > 0) { %>
            <div class="flash-messages">
                <% error.forEach(msg => { %>
                    <div class="alert alert-error"><%= msg %></div>
                <% }) %>
            </div>
        <% } %>

        <!-- Page Title -->
        <div class="page-title">
            <h1>📍 Địa chỉ giao hàng</h1>
            <p>Quản lý địa chỉ giao hàng của bạn một cách dễ dàng</p>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <!-- Sidebar -->
            <aside class="sidebar">
                <h3>👤 Tài khoản</h3>
                <ul class="sidebar-menu">
                    <li><a href="/user/account">🏠 Tổng quan</a></li>
                    <li><a href="/user/profile">👤 Hồ sơ cá nhân</a></li>
                    <li><a href="/user/addresses" class="active">📍 Địa chỉ giao hàng</a></li>
                    <li><a href="/user/orders">📦 Đơn hàng</a></li>
                    <li><a href="/user/favorites">❤️ Yêu thích</a></li>
                </ul>
            </aside>

            <!-- Content Area -->
            <main class="content-area">
                <div class="content-header">
                    <h2>📍 Danh sách địa chỉ</h2>
                    <button class="add-address-btn" onclick="openAddressModal()">
                        ➕ Thêm địa chỉ mới
                    </button>
                </div>

                <!-- Addresses Grid -->
                <% if (addresses && addresses.length > 0) { %>
                    <div class="addresses-grid">
                        <% addresses.forEach(address => { %>
                            <div class="address-card <%= address.isDefault ? 'default' : '' %>">
                                <% if (address.isDefault) { %>
                                    <div class="default-badge">✅ Mặc định</div>
                                <% } %>
                                
                                <div class="address-type">
                                    <% if (address.type === 'home') { %>
                                        🏠 Nhà riêng
                                    <% } else if (address.type === 'office') { %>
                                        🏢 Văn phòng
                                    <% } else { %>
                                        📍 Khác
                                    <% } %>
                                </div>
                                
                                <div class="address-info">
                                    <h4>👤 <%= address.fullName %></h4>
                                    <p>📱 <%= address.phone %></p>
                                    <p>📍 <%= address.address %></p>
                                    <p>🏢 <%= address.district %></p>
                                    <p>🌆 <%= address.city %></p>
                                    <% if (address.zipCode) { %>
                                        <p>📮 <%= address.zipCode %></p>
                                    <% } %>
                                </div>
                                
                                <div class="address-actions">
                                    <% if (!address.isDefault) { %>
                                        <button class="action-btn set-default-btn" onclick="setDefaultAddress('<%= address._id %>')">
                                            ⭐ Đặt mặc định
                                        </button>
                                    <% } %>
                                    <button class="action-btn edit-btn" onclick="editAddress('<%= address._id %>')">
                                        ✏️ Sửa
                                    </button>
                                    <button class="action-btn delete-btn" onclick="deleteAddress('<%= address._id %>')">
                                        🗑️ Xóa
                                    </button>
                                </div>
                            </div>
                        <% }) %>
                    </div>
                <% } else { %>
                    <!-- Empty State -->
                    <div class="empty-state">
                        <div class="empty-icon">📍</div>
                        <h3>Chưa có địa chỉ nào</h3>
                        <p>Bạn chưa thêm địa chỉ giao hàng nào. Hãy thêm địa chỉ để thuận tiện cho việc đặt hàng!</p>
                        <button class="btn btn-primary" onclick="openAddressModal()">
                            ➕ Thêm địa chỉ đầu tiên
                        </button>
                    </div>
                <% } %>
            </main>
        </div>
    </div>

    <!-- Address Modal -->
    <div class="modal" id="addressModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="modalTitle">➕ Thêm địa chỉ mới</h3>
                <button class="close-btn" onclick="closeAddressModal()">✕</button>
            </div>

            <form id="addressForm" action="/user/addresses" method="POST">
                <div class="form-group">
                    <label for="addressType">🏷️ Loại địa chỉ</label>
                    <select id="addressType" name="type" required>
                        <option value="home">🏠 Nhà riêng</option>
                        <option value="office">🏢 Văn phòng</option>
                        <option value="other">📍 Khác</option>
                    </select>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="fullName">👤 Họ và tên *</label>
                        <input type="text" id="fullName" name="fullName" required placeholder="Nhập họ và tên">
                    </div>
                    <div class="form-group">
                        <label for="phone">📱 Số điện thoại *</label>
                        <input type="tel" id="phone" name="phone" required placeholder="Nhập số điện thoại">
                    </div>
                </div>

                <div class="form-group">
                    <label for="address">📍 Địa chỉ chi tiết *</label>
                    <textarea id="address" name="address" required placeholder="Số nhà, tên đường, phường/xã..." rows="3"></textarea>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="district">🏢 Quận/Huyện *</label>
                        <select id="district" name="district" required>
                            <option value="">Chọn quận/huyện</option>
                            <option value="Ba Đình">Ba Đình</option>
                            <option value="Hoàn Kiếm">Hoàn Kiếm</option>
                            <option value="Hai Bà Trưng">Hai Bà Trưng</option>
                            <option value="Đống Đa">Đống Đa</option>
                            <option value="Tây Hồ">Tây Hồ</option>
                            <option value="Cầu Giấy">Cầu Giấy</option>
                            <option value="Thanh Xuân">Thanh Xuân</option>
                            <option value="Hoàng Mai">Hoàng Mai</option>
                            <option value="Long Biên">Long Biên</option>
                            <option value="Nam Từ Liêm">Nam Từ Liêm</option>
                            <option value="Bắc Từ Liêm">Bắc Từ Liêm</option>
                            <option value="Hà Đông">Hà Đông</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="city">🌆 Thành phố</label>
                        <input type="text" id="city" name="city" value="Hà Nội" readonly>
                    </div>
                </div>

                <div class="form-group">
                    <label for="zipCode">📮 Mã bưu điện</label>
                    <input type="text" id="zipCode" name="zipCode" placeholder="Mã bưu điện (tùy chọn)">
                </div>

                <div class="checkbox-group">
                    <input type="checkbox" id="isDefault" name="isDefault">
                    <label for="isDefault">⭐ Đặt làm địa chỉ mặc định</label>
                </div>

                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" onclick="closeAddressModal()">
                        ❌ Hủy
                    </button>
                    <button type="submit" class="btn btn-primary">
                        💾 Lưu địa chỉ
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Footer -->
    <footer>
        <div class="container">
            <p>&copy; 2025 SportShop - Dự án của Nguyễn Thanh Tân</p>
            <p>📧 Tan.NT225923@sis.hust.edu.vn | 📱 0866 387 718</p>
        </div>
    </footer>

    <!-- Notification -->
    <div class="notification" id="notification"></div>

    <script>
        // Modal functions
        function openAddressModal(addressData = null) {
            const modal = document.getElementById('addressModal');
            const form = document.getElementById('addressForm');
            const modalTitle = document.getElementById('modalTitle');
            
            if (addressData) {
                modalTitle.textContent = '✏️ Sửa địa chỉ';
                form.action = `/user/addresses/${addressData.id}`;
                form.method = 'POST';
                
                // Add method override for PUT
                const methodField = document.createElement('input');
                methodField.type = 'hidden';
                methodField.name = '_method';
                methodField.value = 'PUT';
                form.appendChild(methodField);
                
                // Populate form with existing data
                document.getElementById('addressType').value = addressData.type;
                document.getElementById('fullName').value = addressData.fullName;
                document.getElementById('phone').value = addressData.phone;
                document.getElementById('address').value = addressData.address;
                document.getElementById('district').value = addressData.district;
                document.getElementById('city').value = addressData.city;
                document.getElementById('zipCode').value = addressData.zipCode || '';
                document.getElementById('isDefault').checked = addressData.isDefault;
            } else {
                modalTitle.textContent = '➕ Thêm địa chỉ mới';
                form.action = '/user/addresses';
                form.method = 'POST';
                form.reset();
                document.getElementById('city').value = 'Hà Nội';
            }
            
            modal.classList.add('show');
            document.body.style.overflow = 'hidden';
        }

        function closeAddressModal() {
            const modal = document.getElementById('addressModal');
            modal.classList.remove('show');
            document.body.style.overflow = 'auto';
            
            // Reset form
            const form = document.getElementById('addressForm');
            form.reset();
            document.getElementById('city').value = 'Hà Nội';
            
            // Remove method override field if exists
            const methodField = form.querySelector('input[name="_method"]');
            if (methodField) {
                methodField.remove();
            }
        }

        // Address management functions
        function editAddress(addressId) {
            // Get address data from the page
            const addressCards = document.querySelectorAll('.address-card');
            let addressData = null;
            
            addressCards.forEach(card => {
                const editBtn = card.querySelector('.edit-btn');
                if (editBtn && editBtn.getAttribute('onclick').includes(addressId)) {
                    const info = card.querySelector('.address-info');
                    const type = card.querySelector('.address-type').textContent.toLowerCase();
                    
                    addressData = {
                        id: addressId,
                        type: type.includes('nhà') ? 'home' : type.includes('văn phòng') ? 'office' : 'other',
                        fullName: info.querySelector('h4').textContent.replace('👤 ', ''),
                        phone: info.querySelectorAll('p')[0].textContent.replace('📱 ', ''),
                        address: info.querySelectorAll('p')[1].textContent.replace('📍 ', ''),
                        district: info.querySelectorAll('p')[2].textContent.replace('🏢 ', ''),
                        city: info.querySelectorAll('p')[3].textContent.replace('🌆 ', ''),
                        zipCode: info.querySelectorAll('p')[4] ? info.querySelectorAll('p')[4].textContent.replace('📮 ', '') : '',
                        isDefault: card.classList.contains('default')
                    };
                }
            });
            
            if (addressData) {
                openAddressModal(addressData);
            }
        }

        async function setDefaultAddress(addressId) {
            if (confirm('Bạn có muốn đặt địa chỉ này làm mặc định?')) {
                try {
                    const response = await fetch(`/user/addresses/${addressId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ isDefault: true })
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        showNotification('Đã đặt địa chỉ mặc định thành công!', 'success');
                        setTimeout(() => {
                            window.location.reload();
                        }, 1000);
                    } else {
                        showNotification(result.message || 'Có lỗi xảy ra!', 'error');
                    }
                } catch (error) {
                    showNotification('Có lỗi xảy ra khi đặt địa chỉ mặc định!', 'error');
                }
            }
        }

        async function deleteAddress(addressId) {
            const addressCard = document.querySelector(`.address-card .delete-btn[onclick*="${addressId}"]`).closest('.address-card');
            const isDefault = addressCard.classList.contains('default');
            
            if (isDefault) {
                showNotification('Không thể xóa địa chỉ mặc định. Vui lòng đặt địa chỉ khác làm mặc định trước.', 'error');
                return;
            }
            
            if (confirm('Bạn có chắc chắn muốn xóa địa chỉ này?')) {
                try {
                    const response = await fetch(`/user/addresses/${addressId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        showNotification('Xóa địa chỉ thành công!', 'success');
                        setTimeout(() => {
                            window.location.reload();
                        }, 1000);
                    } else {
                        showNotification(result.message || 'Có lỗi xảy ra!', 'error');
                    }
                } catch (error) {
                    showNotification('Có lỗi xảy ra khi xóa địa chỉ!', 'error');
                }
            }
        }

        // Utility functions
        function showNotification(message, type = 'success') {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = `notification ${type} show`;
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, 4000);
        }

        // Toggle user menu (if needed)
        function toggleUserMenu() {
            // Implementation for user dropdown menu
            console.log('Toggle user menu');
        }

        // Modal close on outside click
        document.getElementById('addressModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeAddressModal();
            }
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                const modal = document.getElementById('addressModal');
                if (modal.classList.contains('show')) {
                    closeAddressModal();
                }
            }
        });

        // Phone input formatting
        document.getElementById('phone').addEventListener('input', function(e) {
            let value = e.target.value.replace(/\D/g, '');
            if (value.length > 10) {
                value = value.substring(0, 10);
            }
            
            // Format as: 0xxx xxx xxx
            if (value.length >= 4) {
                value = value.substring(0, 4) + ' ' + value.substring(4);
            }
            if (value.length >= 8) {
                value = value.substring(0, 8) + ' ' + value.substring(8);
            }
            
            e.target.value = value;
        });

        // Form validation
        const form = document.getElementById('addressForm');
        form.addEventListener('submit', function(e) {
            const requiredFields = ['fullName', 'phone', 'address', 'district'];
            let isValid = true;
            
            requiredFields.forEach(fieldName => {
                const field = document.getElementById(fieldName);
                if (!field.value.trim()) {
                    field.style.borderColor = '#dc3545';
                    isValid = false;
                } else {
                    field.style.borderColor = '#e9ecef';
                }
            });
            
            // Phone validation
            const phone = document.getElementById('phone').value.replace(/\s/g, '');
            const phoneRegex = /^(0|\+84)[3-9][0-9]{8}$/;
            if (!phoneRegex.test(phone)) {
                document.getElementById('phone').style.borderColor = '#dc3545';
                showNotification('Số điện thoại không hợp lệ!', 'error');
                isValid = false;
                e.preventDefault();
            }
            
            if (!isValid) {
                e.preventDefault();
                showNotification('Vui lòng điền đầy đủ thông tin bắt buộc!', 'error');
            }
        });

        // Auto-close notification on click
        document.getElementById('notification').addEventListener('click', function() {
            this.classList.remove('show');
        });

        // Auto-hide flash messages after 5 seconds
        document.addEventListener('DOMContentLoaded', function() {
            const flashMessages = document.querySelectorAll('.alert');
            flashMessages.forEach(message => {
                setTimeout(() => {
                    message.style.opacity = '0';
                    setTimeout(() => {
                        message.remove();
                    }, 300);
                }, 5000);
            });
        });
    </script>
</body>
</html>